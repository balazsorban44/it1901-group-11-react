[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/App.js",
    "content": "import React, { Component } from 'react'\n\nimport firebase from 'firebase'\nimport Login from './components/Login'\n\nimport Organizer from './components/Organizer'\nimport PROrganizer from './components/PROrganizer'\nimport BookingBoss from './components/BookingBoss'\nimport BookingManager from './components/BookingManager'\nimport Technician from './components/Technician'\nimport Manager from './components/Manager'\nimport ServiceManager from './components/ServiceManager'\n\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\nimport AppBar from 'material-ui/AppBar'\nimport SelectField from 'material-ui/SelectField'\nimport MenuItem from 'material-ui/MenuItem'\nimport TextField from 'material-ui/TextField'\n\nimport RaisedButton from 'material-ui/RaisedButton'\nimport Avatar from 'material-ui/Avatar'\n\nimport {profiles, muiTheme} from './utils'\n\n\n/**\n * This is the main component\n */\nexport default class App extends Component {\n\n  /**\n  * App constructor\n  */\n  constructor() {\n    super()\n    /**\n    * @type {Object} state\n    * @property {Object} state.user - The logged in user\n    * @property {String} state.loggedin - The logged in user's e-mail\n    * @property {Boolean} state.isDrawerOpened - Is the left menu opened\n    */\n    this.state = {\n      user: null,\n      loggedin: \"joe@org.com\",\n      isDrawerOpened: false\n    }\n  }\n\n  /**\n    * @deprecated Toggle the menu on the left side\n    \n    */\n  toggleDrawer = () => this.setState(({isDrawerOpened}) => ({isDrawerOpened: !isDrawerOpened}))\n\n  /**\n  * Log the clicked user in.\n  * @param {Object} event - event object of the clicked element\n  * @param {number} index - the index of the clicked user\n  * @param {String} value - the e-mail of the clicked user\n  \n  */\n  login = (event, index, value) => {\n    this.setState({loggedin: value})\n    this.logout()\n    firebase.auth().signInWithEmailAndPassword(value, \"123456\")\n  }\n\n  /**\n  * Log out the user\n  \n  */\n  logout() {\n    firebase.auth().signOut()\n      .then(() => {\n        this.setState({user: null})\n      })\n  }\n\n  /**\n  * Set up a listener to authentication changes.\n  \n  */\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        const {uid} = user\n        const db = firebase.database().ref(`staff/profiles/${uid}`)\n        db.on('value', snap => {\n          this.setState({user: Object.assign(snap.val(), {uid})})\n        })\n      }\n    })\n  }\n\n  /**\n  * Display the logged in users subpage, and a top bar.\n  * @return {JSX} Return rendered App component\n  */\n  render() {\n    const {user, isDrawerOpened, loggedin} = this.state\n    return (\n      <div className=\"App\">\n        <MuiThemeProvider muiTheme={muiTheme}>\n          <div>\n            {!user ?\n              <Login/>:\n              <div>\n\n                <AppBar onLeftIconButtonTouchTap={() => this.toggleDrawer()}>\n                  <TextField value={loggedin}/>\n                  <SelectField value={loggedin} onChange={this.login}>\n                    <MenuItem value=\"joe@org.com\"><Profile name=\"Joe\" img=\"joe\"/></MenuItem>\n                    <MenuItem value=\"jane@boob.com\"><Profile name=\"Jane\" img=\"jane\"/></MenuItem>\n                    <MenuItem value=\"jessica@boom.com\"><Profile name=\"Jessica\" img=\"jessica\"/></MenuItem>\n                    <MenuItem value=\"james@man.com\"><Profile name=\"James\" img=\"james\"/></MenuItem>\n                    <MenuItem value=\"jack@tech.com\"><Profile name=\"Jack\" img=\"jack\"/></MenuItem>\n                    <MenuItem value=\"jamie@ser.com\"><Profile name=\"Jamie\" img=\"jamie\"/></MenuItem>\n                    <MenuItem value=\"frank@pro.com\"><Profile name=\"Frank\" img=\"frank\"/></MenuItem>\n                    <MenuItem value=\"\"><RaisedButton secondary label=\"Logout\"/></MenuItem>\n                  </SelectField>\n                </AppBar>\n                {{\n                  \"organizer\":\n                  <Organizer {...{user, isDrawerOpened}} toggleDrawer={this.toggleDrawer}/>,\n                  \"PROrganizer\":\n                  <PROrganizer {...{user, isDrawerOpened}} toggleDrawer={this.toggleDrawer}/>,\n                  \"bookingBoss\":\n                  <BookingBoss {...{user, isDrawerOpened}} toggleDrawer={this.toggleDrawer}/>,\n                  \"bookingManager\":\n                  <BookingManager {...{user, isDrawerOpened}} toggleDrawer={this.toggleDrawer}/>,\n                  \"technician\":\n                  <Technician {...{user, isDrawerOpened}} toggleDrawer={this.toggleDrawer}/>,\n                  \"serviceManager\":\n                  <ServiceManager {...{user, isDrawerOpened}} toggleDrawer={this.toggleDrawer}/>,\n                  \"manager\":\n                  <Manager {...{user, isDrawerOpened}} toggleDrawer={this.toggleDrawer}/>\n                }[user.role]}\n              </div>\n            }\n          </div>\n        </MuiThemeProvider>\n        <Footer/>\n      </div>\n    )\n  }\n}\n\n/**\n  * Display Footer component\n  * @return {JSX} Return a static footer\n  */\nconst Footer = () => (\n  <footer className=\"mdl-mega-footer\">\n    <div className=\"mdl-mega-footer__middle-section\">\n\n      <div className=\"mdl-mega-footer__drop-down-section\">\n        <h1 className=\"mdl-mega-footer__heading\">Documentation<i className=\"material-icons\">insert_drive_file</i></h1>\n        <ul className=\"mdl-mega-footer__link-list\">\n          <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/balazsorban44/it1901-group-11-react\">GitHub</a></li>\n          <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://trello.com/b/AO4STf0n/it1901-prosjekt\">Trello</a></li>\n        </ul>\n      </div>\n\n      <div className=\"mdl-mega-footer__drop-down-section\">\n        <h1 className=\"mdl-mega-footer__heading\">Technology<i className=\"material-icons\">build</i></h1>\n        <ul className=\"mdl-mega-footer__link-list\">\n          <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://reactjs.org/\">ReactJS</a></li>\n          <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://firebase.google.com\">Google Firebase</a></li>\n        </ul>\n      </div>\n\n      <div className=\"mdl-mega-footer__drop-down-section\">\n        <h1 className=\"mdl-mega-footer__heading\">External libraries<i className=\"material-icons\">library_books</i></h1>\n        <ul className=\"mdl-mega-footer__link-list\">\n          <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.material-ui.com\">Material-UI</a></li>\n          <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://getmdl.io/\">Material Design Lite</a></li>\n        </ul>\n      </div>\n\n      <div className=\"mdl-mega-footer__drop-down-section\">\n        <h1 className=\"mdl-mega-footer__heading\">Team<i className=\"material-icons\">people</i></h1>\n        <ul className=\"mdl-mega-footer__link-list\">\n          <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://balazsorban.com\">Balázs Orbán</a></li>\n          <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/supertosse\">Stian Tøsse</a></li>\n          <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/matsjp\">Mats Pedersen</a></li>\n          <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/AleksanderKarlsson\">Aleksander Karlsson</a></li>\n          <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/Hxnsa\">Erik Krüger</a></li>\n        </ul>\n      </div>\n\n    </div>\n\n    <div className=\"mdl-mega-footer__bottom-section\">\n      <div className=\"mdl-logo\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://eventmanager.netlify.com\">Event Manager</a></div>\n      <ul className=\"mdl-mega-footer__link-list\">\n        <li>Made with ❤ at <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ntnu.edu\">NTNU</a></li>\n        <li>IT1901</li>\n        <li>Group 11</li>\n      </ul>\n    </div>\n  </footer>\n)\n\n\n/**\n  * A little snippet to show the logged in user's profile picture and name\n  * @param {Object} props\n  * @param {Object} props.name - Name of the user\n  * @param {Object} props.img - Image path of the user\n  */\nconst Profile = ({name, img}) => (\n  <div className=\"user-info\">\n    <h2>{name}</h2>\n    <Avatar src={profiles(`./${img}.jpg`)}/>\n  </div>\n)\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/App.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "App",
    "memberof": "src/App.js",
    "static": true,
    "longname": "src/App.js~App",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/App.js",
    "importStyle": "App",
    "description": "This is the main component",
    "lineNumber": 29,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#constructor",
    "access": "public",
    "description": "App constructor",
    "lineNumber": 34
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "state",
    "memberof": "src/App.js~App",
    "static": false,
    "longname": "src/App.js~App#state",
    "access": "public",
    "description": "",
    "lineNumber": 42,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.user",
        "description": "The logged in user"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state.loggedin",
        "description": "The logged in user's e-mail"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "state.isDrawerOpened",
        "description": "Is the left menu opened"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "toggleDrawer",
    "memberof": "src/App.js~App",
    "static": false,
    "longname": "src/App.js~App#toggleDrawer",
    "access": "public",
    "description": "",
    "lineNumber": 53,
    "deprecated": "Toggle the menu on the left side",
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "login",
    "memberof": "src/App.js~App",
    "static": false,
    "longname": "src/App.js~App#login",
    "access": "public",
    "description": "Log the clicked user in.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "event object of the clicked element"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "the index of the clicked user"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the e-mail of the clicked user"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "logout",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#logout",
    "access": "public",
    "description": "Log out the user",
    "lineNumber": 72,
    "params": [],
    "return": null
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#componentDidMount",
    "access": "public",
    "description": "Set up a listener to authentication changes.",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "render",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#render",
    "access": "public",
    "description": "Display the logged in users subpage, and a top bar.",
    "lineNumber": 99,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return rendered App component"
    },
    "params": []
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "Footer",
    "memberof": "src/App.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/App.js~Footer",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/App.js",
    "importStyle": null,
    "description": "Display Footer component",
    "lineNumber": 152,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return a static footer"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "Profile",
    "memberof": "src/App.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/App.js~Profile",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/App.js",
    "importStyle": null,
    "description": "A little snippet to show the logged in user's profile picture and name",
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.name",
        "description": "Name of the user"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.img",
        "description": "Image path of the user"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/components/Band/Concerts.jsx",
    "content": "import React, {Component} from 'react'\n\nimport { Table, TableBody, TableHeader,\n  TableHeaderColumn, TableRow,\n  TableRowColumn\n} from 'material-ui/Table'\nimport {parseDate, parseNumber, parsePrice, InfoSnippet, muiTheme} from '../../utils'\n\n\n/**\n  * Concert component\n  */\nexport default class Concerts extends Component {\n  /**\n  * @return {JSX} Return a List of concerts divided into three sections, previous concerts and future accepted/awating approval concerts\n  */\n  render() {\n    const {concerts, showPreviousConcerts, showFutureConcerts} = this.props\n    const acceptedFutureBookings = {}\n    const acceptedPreviousBookings = {}\n    const awaitingBookings = {}\n    if (concerts) {\n      Object.keys(concerts).forEach(key => {\n        const concert = concerts[key]\n        const {isAcceptedByBookingBoss, from} = concert\n        if (isAcceptedByBookingBoss === true) {\n          if (Date.now() <= from) {\n            acceptedFutureBookings[key] = concert\n          } else {\n            acceptedPreviousBookings[key] = concert\n          }\n        } else if (isAcceptedByBookingBoss === \"unhandled\") {\n          awaitingBookings[key] = concert\n        }\n      })\n    }\n\n    return (\n      <div>\n        {showPreviousConcerts && Object.keys(acceptedPreviousBookings).length !== 0 &&\n          <InfoSnippet\n            icon=\"history\"\n            orientation=\"portrait\"\n            disableTitle\n            disableHover\n            alignSubText=\"center\"\n            subText=\"Previous concerts\"\n          >\n            <Table>\n              <TableHeader adjustForCheckbox={false} displaySelectAll={false}>\n                <TableRow>\n                  <TableHeaderColumn>Concert date</TableHeaderColumn>\n                  <TableHeaderColumn>Tickets sold</TableHeaderColumn>\n                  <TableHeaderColumn>Total income</TableHeaderColumn>\n                </TableRow>\n              </TableHeader>\n              <TableBody displayRowCheckbox={false} showRowHover>\n                {Object.keys(acceptedPreviousBookings).map(key => {\n                  const {from, participants, ticketPrice, bandFee} = acceptedPreviousBookings[key]\n                  return (\n                    <TableRow key={key}>\n                        <TableRowColumn>{parseDate(from)}</TableRowColumn>\n                        <TableRowColumn>{parseNumber(participants)}</TableRowColumn>\n                        <TableRowColumn>{parsePrice(participants*ticketPrice-bandFee)}</TableRowColumn>\n                      </TableRow>\n                  )\n                })}\n              </TableBody>\n            </Table>\n          </InfoSnippet>\n        }\n        {showFutureConcerts && Object.keys(acceptedFutureBookings).length !== 0 &&\n          <InfoSnippet\n            icon=\"bookmark\"\n            orientation=\"portrait\"\n            disableTitle\n            disableHover\n            alignSubText=\"center\"\n            subText=\"Upcoming concerts\"\n            content={<ConcertTable concerts={acceptedFutureBookings}/>}\n          />\n        }\n        {showFutureConcerts && Object.keys(awaitingBookings).length !== 0 &&\n          <InfoSnippet\n            icon=\"bookmark_border\"\n            orientation=\"portrait\"\n            disableTitle\n            disableHover\n            alignSubText=\"center\"\n            subText=\"Awating approval\"\n            content={<ConcertTable concerts={awaitingBookings}/>}\n          />\n        }\n      </div>\n    )\n  }\n}\n\n/**\n  * Display a list of concerts in a table\n  * @param {Object} props\n  * @param {Object} props.concerts - List of concerts\n  * @return {JSX} Return a list of concerts\n*/\nconst ConcertTable = ({concerts}) => (\n  <Table>\n    <TableHeader adjustForCheckbox={false} displaySelectAll={false}>\n      <TableRow>\n        <TableHeaderColumn>Concert date</TableHeaderColumn>\n        <TableHeaderColumn>Ticket price</TableHeaderColumn>\n        <TableHeaderColumn>Contact</TableHeaderColumn>\n      </TableRow>\n    </TableHeader>\n    <TableBody displayRowCheckbox={false} showRowHover>\n      {Object.keys(concerts).map(key => {\n        const {from, ticketPrice, contact} = concerts[key]\n        return (\n          <TableRow key={key}>\n            <TableRowColumn>{parseDate(from)}</TableRowColumn>\n            <TableRowColumn>{ticketPrice === 0 ? \"No price yet\" : parsePrice(ticketPrice)}</TableRowColumn>\n            <TableRowColumn><a style={{color: muiTheme.palette.accent1Color}} href={`mailto:${contact}`}>{contact}</a></TableRowColumn>\n          </TableRow>\n        )\n      })}\n    </TableBody>\n  </Table>\n)\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/Band/Concerts.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "class",
    "name": "Concerts",
    "memberof": "src/components/Band/Concerts.jsx",
    "static": true,
    "longname": "src/components/Band/Concerts.jsx~Concerts",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/Band/Concerts.jsx",
    "importStyle": "Concerts",
    "description": "Concert component",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/Band/Concerts.jsx~Concerts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Band/Concerts.jsx~Concerts#render",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return a List of concerts divided into three sections, previous concerts and future accepted/awating approval concerts"
    },
    "params": []
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "ConcertTable",
    "memberof": "src/components/Band/Concerts.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Band/Concerts.jsx~ConcertTable",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/Band/Concerts.jsx",
    "importStyle": null,
    "description": "Display a list of concerts in a table",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.concerts",
        "description": "List of concerts"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return a list of concerts"
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "src/components/Band/Reviews.jsx",
    "content": "import React, {Component} from 'react'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport TextField from 'material-ui/TextField'\nimport Send from 'material-ui/svg-icons/content/send'\nimport firebase from 'firebase'\nimport {Rating, InfoSnippet, parseDate} from '../../utils'\n\n/**\n * Display list of reviews\n * @param {Object} props\n * @param {Object} props.reviews - List of reviews\n * @param {Boolean} props.showReviews - Should show review\n * @return {JSX} Return list of reviews\n */\nconst Reviews = ({reviews, showReviews}) => {\n  let reviewList = []\n  let averageRating = []\n  Object.keys(reviews).forEach(key => {\n    const {content, rating, reviewerName, timestamp} = reviews[key]\n    averageRating.push(rating)\n    reviewList.push(\n      <li\n        style={{display: \"flex\"}}\n        key={content}\n      >\n        <p style={{fontSize: \"1.1em\"}}>{content} ({rating})</p>\n        <span style={{margin: \"0 .5em\"}}>-</span>\n        <p style={{fontStyle: \"italic\"}}>{reviewerName} ({parseDate(timestamp)})</p>\n      </li>\n    )\n  })\n  averageRating = averageRating.reduce((p, c) => p + c) / averageRating.length\n  return(\n    <div>\n      {showReviews &&\n        <InfoSnippet\n          icon=\"thumbs_up_down\"\n          disableTitle\n          disableHover\n          orientation=\"portrait\"\n          alignSubText=\"center\"\n          subText=\"Band reviews\"\n        >\n          {reviews[Object.keys(reviews)[0]].rating !== 0 ?\n            <div>\n              <ul style={{marginBottom: 0}}>\n                {reviewList}\n              </ul>\n              <div style={{\n                display: \"flex\",\n                alignItems: \"center\"\n              }}>\n                <h6>({averageRating.toFixed(2)})</h6>\n                <Rating rating={Math.ceil(averageRating)}/>\n              </div>\n            </div> :\n          \"There is no reviews yet.\"}\n        </InfoSnippet>\n      }\n    </div>\n  )\n}\n\nexport default Reviews\n\n\n/**\n * Add review component\n */\nexport class AddReview extends Component {\n\n  /**\n  * Add review constructor\n  */\n  constructor() {\n    super()\n\n    /**\n    * @type {Object} state\n    * @property {String} state.content - Rating content\n    * @property {number} state.rating - Rating from 1 to 5\n    * @property {Boolean} state.isSentReview - Is the review sent yet\n    */\n    this.state = {\n      content: \"\",\n      rating: 0,\n      isSentReview: false\n    }\n  }\n\n\n  /**\n  * Handle the changes in the rating's value\n  * @param {number} index - Rating value based on click\n\n  */\n  handleRatingChange = index => this.setState(({rating}) => ({rating: rating===index ? 0 : index}))\n\n\n  /**\n  * Handle the changes in the rating's content\n  * @param {String} content - Rating content\n\n  */\n  handleReviewChange = e => this.setState({content: e.target.value})\n\n\n  /**\n  * Validate and write the review to the databse on click\n\n  */\n  handleSendReviewClick = () => {\n    const {content, rating} = this.state\n    if (rating !== 0 && content !== \"\") {\n      const db = firebase.database().ref()\n      db.child(`bands/${this.props.bandKey}/reviews`)\n        .push().set({\n          content, rating,\n          timestamp: Date.now(),\n          reviewerName: this.props.reviewerName\n        }).then(\n          this.setState({\n            content: \"\",\n            rating: 0,\n            isSentReview: true\n          })\n        )\n    } else {\n      alert(\"Please rate the band and give a review.\")\n      // COMBAK: Add better error message to validation\n    }\n  }\n\n  /**\n  * Display a review InfoSnippet\n  * @return {JSX} Return a review InfoSnippet\n  */\n  render() {\n    const {content, rating, isSentReview} = this.state\n    const {canAddReview, concerts} = this.props\n    return (\n      <div>\n        {canAddReview &&\n          <InfoSnippet\n            icon=\"rate_review\"\n            disableTitle\n            disableHover\n            orientation=\"portrait\"\n            alignSubText=\"center\"\n            subText=\"Review band\"\n          >\n            {concerts[0] !== \"\" ?\n              <div>\n                {!isSentReview ?\n                  <div>\n                    <div style={{\n                      display: \"flex\",\n                      alignItems: \"flex-end\"\n                    }}>\n                      <TextField\n                        hintText=\"This band is amazing!\"\n                        floatingLabelText=\"Write a review about the band\"\n                        onChange={this.handleReviewChange}\n                        value={content}\n                      />\n                      <RaisedButton\n                        onClick={this.handleSendReviewClick}\n                        label=\"Send\"\n                        labelPosition=\"before\"\n                        icon={<Send/>}\n                        style={{marginLeft: \"1em\"}}\n                        secondary\n                      />\n                    </div>\n                    <Rating {...{rating}} editable handleRatingChange={this.handleRatingChange}/>\n                  </div> : <h4>You just sent a review.</h4>\n                }\n              </div> :\n              \"You cannot review this band because they have not played on any concerts yet.\"\n            }\n          </InfoSnippet>\n        }\n      </div>\n    )\n  }\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/Band/Reviews.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "AddReview",
    "memberof": "src/components/Band/Reviews.jsx",
    "static": true,
    "longname": "src/components/Band/Reviews.jsx~AddReview",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/Band/Reviews.jsx",
    "importStyle": "{AddReview}",
    "description": "Add review component",
    "lineNumber": 70,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 65,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/Band/Reviews.jsx~AddReview",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Band/Reviews.jsx~AddReview#constructor",
    "access": "public",
    "description": "Add review constructor",
    "lineNumber": 75
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/Band/Reviews.jsx~AddReview",
    "static": false,
    "longname": "src/components/Band/Reviews.jsx~AddReview#state",
    "access": "public",
    "description": "",
    "lineNumber": 84,
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state.content",
        "description": "Rating content"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "state.rating",
        "description": "Rating from 1 to 5"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "state.isSentReview",
        "description": "Is the review sent yet"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "handleRatingChange",
    "memberof": "src/components/Band/Reviews.jsx~AddReview",
    "static": false,
    "longname": "src/components/Band/Reviews.jsx~AddReview#handleRatingChange",
    "access": "public",
    "description": "Handle the changes in the rating's value",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Rating value based on click"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "handleReviewChange",
    "memberof": "src/components/Band/Reviews.jsx~AddReview",
    "static": false,
    "longname": "src/components/Band/Reviews.jsx~AddReview#handleReviewChange",
    "access": "public",
    "description": "Handle the changes in the rating's content",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "Rating content"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "handleSendReviewClick",
    "memberof": "src/components/Band/Reviews.jsx~AddReview",
    "static": false,
    "longname": "src/components/Band/Reviews.jsx~AddReview#handleSendReviewClick",
    "access": "public",
    "description": "Validate and write the review to the databse on click",
    "lineNumber": 112,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/Band/Reviews.jsx~AddReview",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Band/Reviews.jsx~AddReview#render",
    "access": "public",
    "description": "Display a review InfoSnippet",
    "lineNumber": 138,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return a review InfoSnippet"
    },
    "params": []
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "Reviews",
    "memberof": "src/components/Band/Reviews.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Band/Reviews.jsx~Reviews",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/Band/Reviews.jsx",
    "importStyle": "Reviews",
    "description": "Display list of reviews",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.reviews",
        "description": "List of reviews"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.showReviews",
        "description": "Should show review"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return list of reviews"
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/components/Band/TechnicalRequirements.jsx",
    "content": "import React, {Component} from 'react'\nimport Chip from 'material-ui/Chip'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport FlatButton from 'material-ui/FlatButton'\nimport TextField from 'material-ui/TextField'\nimport firebase from 'firebase'\nimport {InfoSnippet} from '../../utils'\n\n\n/**\n  * TechnicalRequirements component\n  */\nexport default class TechnicalRequirements extends Component {\n  /**\n  * TechnicalRequirements constructor\n  * @param {Object} props\n  */\n  constructor(props) {\n    super(props)\n    const {showRequirements, canEditRequirements} = props\n\n    /**\n    * @type {Object} state\n    * @property {Boolean} state.showRequirements - Should show technical requirements\n    * @property {Boolean} state.canEditRequirements - Can edit the technical requirements\n    */\n    this.state = {\n      requirements: [\"\"],\n      editMode: false,\n      showRequirements,\n      canEditRequirements\n    }\n  }\n\n  /**\n    * Handle changes of the technical requirements input field\n    * @param {Object} e - Object containing the requirements\n\n    */\n  handleInput = e => this.setState({requirements: e.target.value.split(', ')})\n\n  /**\n  * Toggle edit mode\n\n  */\n  toggleEdit = () => this.setState(({editMode}) => ({editMode: !editMode}))\n\n\n  /**\n  * Send technical requirements to the database and save it for the given band\n  * @param {number} bandId - The ID of the band\n\n  */\n  addTechicalRequirement = bandId => {\n    const db = firebase.database().ref()\n    const bandRef = db.child(`bands/${bandId}/technicalRequirements`)\n    const {technicalRequirements} = this.props\n    let {requirements} = this.state\n    requirements = requirements.filter(requirement => requirement !== '' && requirement.length < 40)\n    if (technicalRequirements === ['']) {\n      bandRef.set(requirements)\n    } else {\n      bandRef.set(technicalRequirements.concat(requirements))\n    }\n    this.setState({requirements: []})\n  }\n\n  /**\n  * Remove a technical requirement from the database of the given band\n  * @param {number} bandId - The ID of the band\n  * @param {number} reqId - The ID of the requirement to remove\n\n  */\n  removeTechnicalRequirement = (bandId, reqId) => {\n    let {technicalRequirements} = this.props\n    const db = firebase.database().ref()\n    technicalRequirements.length === 1 ? technicalRequirements = [''] : technicalRequirements.splice(reqId, 1)\n    db.child(`bands/${bandId}/technicalRequirements`).set(technicalRequirements)\n  }\n\n\n  /**\n  * Display a list of technical requirements\n  * @param {number} bandId - The ID of the band\n  * @param {number} reqId - The ID of the requirement to remove\n  * @return {JSX} Return a list of technical requirement list\n  */\n  render() {\n    const {requirements, editMode, showRequirements, canEditRequirements} = this.state\n    const {technicalRequirements, bandKey} = this.props\n    return (\n      <div>\n        {showRequirements &&\n          <InfoSnippet\n            icon=\"settings_input_component\"\n            alignSubText=\"stretch\"\n            subText={\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  flexGrow: 1,\n                  justifyContent: \"space-between\"\n                }}>\n                <p>Technical requirements</p>\n                {canEditRequirements &&\n                  <FlatButton\n                    label={this.state.editMode ? \"Done\" : \"Edit\"}\n                    onClick={this.toggleEdit}\n                    labelPosition=\"before\"\n                    primary\n                  />\n                }\n              </div>}\n            disableTitle\n            disableHover\n          >\n            <ul style={{\n              display: \"flex\",\n              flexWrap: \"wrap\",\n              marginTop: \"1em\"\n            }}>\n              {Object.keys(technicalRequirements).map(reqKey => {\n                return (\n                  <li  style={{margin: \"0 .6em .6em 0\"}} key={reqKey}>\n                    {technicalRequirements[reqKey] !== \"\" &&\n                      <Chip\n                        key={reqKey}\n                        onRequestDelete={editMode ? () => this.removeTechnicalRequirement(bandKey, reqKey) : null}\n                      >\n                        {technicalRequirements[reqKey]}</Chip>\n                    }\n                  </li>\n                )\n              })}\n            </ul>\n            {editMode &&\n              <form>\n                <TextField\n                  hintText=\"Guitars, Microphone, etc.\"\n                  floatingLabelText=\"Add technical requirement\"\n                  value={requirements.join(', ')}\n                  onChange={e => this.handleInput(e)}\n                />\n                <RaisedButton style={{marginLeft: \"1em\"}} label=\"Add\" primary onClick={() => this.addTechicalRequirement(bandKey)}/>\n              </form>\n            }\n          </InfoSnippet>\n        }\n      </div>\n    )\n  }\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/Band/TechnicalRequirements.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "TechnicalRequirements",
    "memberof": "src/components/Band/TechnicalRequirements.jsx",
    "static": true,
    "longname": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/Band/TechnicalRequirements.jsx",
    "importStyle": "TechnicalRequirements",
    "description": "TechnicalRequirements component",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 74,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements#constructor",
    "access": "public",
    "description": "TechnicalRequirements constructor",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements",
    "static": false,
    "longname": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements#state",
    "access": "public",
    "description": "",
    "lineNumber": 27,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "state.showRequirements",
        "description": "Should show technical requirements"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "state.canEditRequirements",
        "description": "Can edit the technical requirements"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "handleInput",
    "memberof": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements",
    "static": false,
    "longname": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements#handleInput",
    "access": "public",
    "description": "Handle changes of the technical requirements input field",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Object containing the requirements"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "toggleEdit",
    "memberof": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements",
    "static": false,
    "longname": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements#toggleEdit",
    "access": "public",
    "description": "Toggle edit mode",
    "lineNumber": 46,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "addTechicalRequirement",
    "memberof": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements",
    "static": false,
    "longname": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements#addTechicalRequirement",
    "access": "public",
    "description": "Send technical requirements to the database and save it for the given band",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bandId",
        "description": "The ID of the band"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "removeTechnicalRequirement",
    "memberof": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements",
    "static": false,
    "longname": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements#removeTechnicalRequirement",
    "access": "public",
    "description": "Remove a technical requirement from the database of the given band",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bandId",
        "description": "The ID of the band"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "reqId",
        "description": "The ID of the requirement to remove"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Band/TechnicalRequirements.jsx~TechnicalRequirements#render",
    "access": "public",
    "description": "Display a list of technical requirements",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bandId",
        "description": "The ID of the band"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "reqId",
        "description": "The ID of the requirement to remove"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return a list of technical requirement list"
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/components/Band/index.js",
    "content": "import React, {Component} from 'react'\nimport {List} from 'material-ui/List'\nimport Divider from 'material-ui/Divider'\nimport FontIcon from 'material-ui/FontIcon'\nimport Chip from 'material-ui/Chip'\nimport {Card, CardText, CardMedia, CardTitle} from 'material-ui/Card'\nimport Reviews, {AddReview} from './Reviews'\nimport TechnicalRequirements from './TechnicalRequirements'\nimport Concerts from './Concerts'\nimport firebase from 'firebase'\nimport {InfoSnippet, parseNumber, muiTheme, Icon} from '../../utils'\nimport cover from '../../img/musician.jpg'\n\n/**\n  * Band component\n  */\nexport default class Band extends Component {\n  /**\n  * Band constructor\n  */\n  constructor() {\n    super()\n\n    /**\n    * @type {Object} state\n    * @property {Object} state.manager - Band's manager\n    * @property {String} state.summary - Band's summary\n    * @property {String} state.lastFMLink - Link to the band's LastFM profile\n    */\n    this.state = {\n      manager: {},\n      summary: \"\",\n      lastFMLink: \"\",\n      cover\n    }\n  }\n\n  /**\n  * Fetch band information from the database, and lastFM\n\n  */\n  componentDidMount() {\n    const db = firebase.database().ref()\n    const profilesRef = db.child('staff/profiles')\n    const {band: {name, manager}} = this.props\n    profilesRef.child(manager).on('value', snap => {\n      this.setState({manager: snap.val()})\n    })\n\n    fetch(`https://ws.audioscrobbler.com/2.0/?method=artist.getinfo&artist=${name}&api_key=35f1b3f9790cddd48125c3b2acaae8a4&format=json`)\n    .then(response => {\n      if (response.ok) {\n        response.json().then(({artist}) => {\n          let {\n            bio: {summary},\n            // image,\n            // stats:{listeners}\n          } = artist\n          // bandKey && firebase.database().ref(`bands/${bandKey}/monthlyListeners`).set(parseInt(listeners,10))\n          const lastFMLink = summary.split('href=\"')[1].split('\">')[0]\n          summary = summary.split('<a')[0]\n          // const cover = image[4][\"#text\"].replace(\"300x300\", \"600x600\")\n          // cover !== \"\" && this.setState({cover})\n          this.setState({summary, lastFMLink})\n      })}\n    })\n  }\n\n  /**\n  * Display a Band card\n  * @return {JSX} Return a Band card\n  */\n  render() {\n    let {\n      headerType, title, subtitle,\n      bandKey, band, concerts, reviewerName,\n      showAlbumSales, showMonthlyListeners, showGenre, showManager,\n      showBandMembers,\n      showRequirements, canEditRequirements,\n      showPreviousConcerts, showFutureConcerts,\n      canAddReview, showReviews\n    } = this.props\n\n    const {\n      manager: {name: managerName, email},\n      cover, summary, lastFMLink\n    } = this.state\n\n    if (concerts) {\n      concerts = Object.keys(concerts)\n      .filter(concertKey => {\n        const {band, isAcceptedByBookingBoss} = concerts[concertKey]\n        return  band === bandKey && isAcceptedByBookingBoss !== \"unhandled\"\n      } )\n      .reduce((filteredConcerts, concertKey) => {\n        filteredConcerts[concertKey] = concerts[concertKey]\n        return filteredConcerts\n      }, {})\n    }\n\n    const {name, genre, albumSales, monthlyListeners, technicalRequirements, reviews, members} = band\n    return (\n      <Card style={{margin: \"1em\"}}>\n        {{\n          \"compact\":\n          <CardTitle style={{paddingBottom: 8}} actAsExpander>\n            <div style={{display: \"flex\"}}>\n              <div style={{\n                position: \"relative\",\n                width: 128,\n                height: 128,\n                overflow: \"hidden\",\n                backgroundColor: \"pink\"\n              }}>\n                <img\n                  style={{\n                    height: \"100%\",\n                    backgroundColor: \"grey\",\n                    filter: \"grayscale(1)\"\n                  }}\n                  src={cover}\n                  alt={name}\n                />\n                <div style={{\n                  top: 0,\n                  position: \"absolute\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  zIndex: 1,\n                  overflow: \"hidden\",\n                  backgroundImage: \"linear-gradient(to bottom, rgba(0,0,0,.4) 0%, rgba(229, 28, 40, 0.5) 100%)\"\n                }}/>\n              </div>\n              <div style={{flexGrow: 1}}>\n                <h6 >{title}</h6>\n                <div style={{textAlign: \"center\"}}>{subtitle}</div>\n              </div>\n              <Icon color=\"black\" name=\"keyboard_arrow_down\"/>\n            </div>\n          </CardTitle>,\n          \"big\": <CardMedia\n            className=\"band-cover\"\n            overlayContentStyle={{\n              background: \"linear-gradient(rgba(0,0,0,0), rgba(0,0,0,.6))\"\n            }}\n            actAsExpander\n            overlay={\n              <CardTitle title={<div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"flex-end\"}}>\n                <span>{title}</span>\n                <Icon color=\"white\" name=\"keyboard_arrow_down\"/>\n              </div>} subtitle={subtitle}/>\n            }>\n            <img style={{backgroundColor: \"grey\"}} src={cover} alt={name}/>\n          </CardMedia>\n\n        }[headerType]}\n\n        <CardText expandable>\n          {headerType === \"compact\" && <Divider/>}\n          <Summary {...{summary, lastFMLink}}/>\n          <List style={{display: \"flex\", flexWrap: \"wrap\"}}>\n            <AlbumSales {...{showAlbumSales, albumSales}}/>\n            <Genre {...{showGenre, genre}}/>\n            <MonthlyListeners {...{showMonthlyListeners, monthlyListeners}}/>\n            <BandManager {...{showManager, email, managerName}}/>\n          </List>\n          <BandMembers {...{showBandMembers, members}}/>\n          <TechnicalRequirements {...{showRequirements, canEditRequirements, technicalRequirements, bandKey}}/>\n          <Concerts {...{concerts, showPreviousConcerts, showFutureConcerts}}/>\n          <AddReview {...{canAddReview, reviewerName, bandKey, concerts}}/>\n          <Reviews {...{reviews, showReviews}}/>\n        </CardText>\n      </Card>\n    )\n  }\n}\n\n/**\n  * Display the band's manager\n  * @param {Object} props\n  * @param {Boolean} props.showManager - Should show the manager\n  * @param {String} props.managerName - Name of the band's manager\n  * @param {String} props.email - E-mail address of the band's manager\n  * @return {JSX} Return the band's manager\n  */\nconst BandManager = ({showManager, managerName, email}) => (\n  <div>\n    {showManager &&\n      <InfoSnippet\n        disableHover\n        icon=\"business\"\n        subText=\"Band manager\"\n      >\n        <div style={{\n            display: \"flex\",\n            alignItems: \"center\"\n        }}>\n          <div style={{fontSize: \"1.1em\", margin: 0}}>{managerName}</div>\n          <FontIcon title={email} color={muiTheme.palette.accent1Color} style={{ marginLeft: \".5em\", cursor: \"pointer\",fontSize: \".9em\"}} className=\"material-icons\">mail</FontIcon>\n        </div>\n      </InfoSnippet>\n    }\n  </div>\n)\n\n/**\n  * Display the band's summary\n  * @param {Object} props\n  * @param {String} props.summary - Summary of the band\n  * @param {String} props.lastFM - Link to the band's LastFM profile\n  * @return {JSX} Return the band's summary\n  */\nconst Summary = ({summary, lastFMLink}) => (\n  <InfoSnippet\n    orientation=\"portrait\"\n    disableHover\n    icon=\"info\"\n    subText=\"Summary\"\n    content={\n      <div>\n        <p style={{textAlign: \"left\"}}>{summary}</p>\n        <a style={{fontSize: \".8em\", color: muiTheme.palette.accent1Color}} href={lastFMLink}>more on Last.FM</a>\n      </div>\n    }\n  />\n)\n\n\n/**\n  * Display the band's album sales\n  * @param {Object} props\n  * @param {Boolean} props.showAlbumSales - Should show the album sales\n  * @param {number} props.albumSales - Albums sold by the band\n  * @return {JSX} Return the band's album sales\n  */\nconst AlbumSales = ({showAlbumSales, albumSales}) => (\n  <div>\n    {showAlbumSales &&\n      <InfoSnippet\n        icon=\"album\"\n        subText=\"Album sales\"\n        content={parseNumber(albumSales)}\n      />}\n  </div>\n)\n\n\n/**\n  * Display the band's genre\n  * @param {Object} props\n  * @param {Boolean} props.showGenre - Should show the genre\n  * @param {String} props.genre - Genre of the band\n  * @return {JSX} Return the band's genre\n  */\nconst Genre = ({showGenre, genre}) => (\n  <div>\n    {showGenre &&\n      <InfoSnippet\n        icon=\"fingerprint\"\n        subText=\"Genre\"\n        content={genre}\n      />}\n  </div>\n)\n\n\n/**\n  * Display the band's monthly listeners\n  * @param {Object} props\n  * @param {Boolean} props.showMonthlyListeners - Should show the monthly listeners\n  * @param {number} props.monthlyListeners - Monthly listeners of the band\n  * @return {JSX} Return the band's monthly listeners\n  */\nconst MonthlyListeners = ({showMonthlyListeners, monthlyListeners}) => (\n  <div>\n    {showMonthlyListeners &&\n      <InfoSnippet\n        icon=\"music_note\"\n        subText=\"Monthly listeners\"\n        content={parseNumber(monthlyListeners)}\n      />}\n  </div>\n)\n\n\n/**\n  * Display the band's members as a list\n  * @param {Object} props\n  * @param {Boolean} props.showBandMembers - Should show the band members\n  * @param {Array} props.members - List of the members\n  * @return {JSX} Return the band's members as a list\n  */\nconst BandMembers = ({showBandMembers, members}) => (\n  <div>\n    {showBandMembers &&\n      <InfoSnippet\n        disableHover\n        disableTitle\n        icon=\"people\"\n        subText=\"Band members\"\n      >\n        <div style={{display: \"flex\", flexWrap: \"wrap\"}}>\n          {members.map(member => <Chip style={{margin: \"0 .6em .6em 0\"}} key={member}>{member}</Chip>)}\n        </div>\n      </InfoSnippet>\n    }\n  </div>\n)\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/Band/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "class",
    "name": "Band",
    "memberof": "src/components/Band/index.js",
    "static": true,
    "longname": "src/components/Band/index.js~Band",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/Band/index.js",
    "importStyle": "Band",
    "description": "Band component",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 83,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/Band/index.js~Band",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Band/index.js~Band#constructor",
    "access": "public",
    "description": "Band constructor",
    "lineNumber": 21
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/Band/index.js~Band",
    "static": false,
    "longname": "src/components/Band/index.js~Band#state",
    "access": "public",
    "description": "",
    "lineNumber": 30,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.manager",
        "description": "Band's manager"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state.summary",
        "description": "Band's summary"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state.lastFMLink",
        "description": "Link to the band's LastFM profile"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/components/Band/index.js~Band",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Band/index.js~Band#componentDidMount",
    "access": "public",
    "description": "Fetch band information from the database, and lastFM",
    "lineNumber": 42,
    "params": [],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/Band/index.js~Band",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Band/index.js~Band#render",
    "access": "public",
    "description": "Display a Band card",
    "lineNumber": 73,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return a Band card"
    },
    "params": []
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "BandManager",
    "memberof": "src/components/Band/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Band/index.js~BandManager",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/Band/index.js",
    "importStyle": null,
    "description": "Display the band's manager",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.showManager",
        "description": "Should show the manager"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.managerName",
        "description": "Name of the band's manager"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.email",
        "description": "E-mail address of the band's manager"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return the band's manager"
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "Summary",
    "memberof": "src/components/Band/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Band/index.js~Summary",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/Band/index.js",
    "importStyle": null,
    "description": "Display the band's summary",
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.summary",
        "description": "Summary of the band"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.lastFM",
        "description": "Link to the band's LastFM profile"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return the band's summary"
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "AlbumSales",
    "memberof": "src/components/Band/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Band/index.js~AlbumSales",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/Band/index.js",
    "importStyle": null,
    "description": "Display the band's album sales",
    "lineNumber": 236,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.showAlbumSales",
        "description": "Should show the album sales"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "props.albumSales",
        "description": "Albums sold by the band"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return the band's album sales"
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "Genre",
    "memberof": "src/components/Band/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Band/index.js~Genre",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/Band/index.js",
    "importStyle": null,
    "description": "Display the band's genre",
    "lineNumber": 255,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.showGenre",
        "description": "Should show the genre"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.genre",
        "description": "Genre of the band"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return the band's genre"
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "MonthlyListeners",
    "memberof": "src/components/Band/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Band/index.js~MonthlyListeners",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/Band/index.js",
    "importStyle": null,
    "description": "Display the band's monthly listeners",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.showMonthlyListeners",
        "description": "Should show the monthly listeners"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "props.monthlyListeners",
        "description": "Monthly listeners of the band"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return the band's monthly listeners"
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "BandMembers",
    "memberof": "src/components/Band/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Band/index.js~BandMembers",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/Band/index.js",
    "importStyle": null,
    "description": "Display the band's members as a list",
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.showBandMembers",
        "description": "Should show the band members"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "props.members",
        "description": "List of the members"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return the band's members as a list"
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "src/components/BookingBoss/Bookings.jsx",
    "content": "import React, { Component } from 'react'\n\nimport {Tabs, Tab} from 'material-ui/Tabs'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport firebase from 'firebase'\nimport {parseDate, parseTime, parsePrice, Loading} from '../../utils'\n\nimport Moment from 'moment'\nimport { extendMoment } from 'moment-range'\n\n\n/**\n  * Create an instance of Moment.js\n  */\nconst moment = extendMoment(Moment)\n\n\n/**\n  * Bookings component\n  */\nexport default class Bookings extends Component {\n\n  /**\n    * Display bookings divided into three category, awating, accepted, rejected\n    * @return {JSX} Return bookings divided into three category, awating, accepted, rejected\n    */\n  render() {\n    const {unhandledCounter, unhandledBookings, acceptedCounter, acceptedBookings, rejectedCounter, rejectedBookings} = this.props\n    return (\n      <Tabs>\n        <Tab label={`New(${unhandledCounter})`}>\n          {unhandledCounter !== 0 ?\n            <BookingTab bookings={unhandledBookings}/>\n          :\n          <Loading/>}\n        </Tab>/>\n        <Tab label={`Accepted(${acceptedCounter})`}>\n          <BookingTab bookings={acceptedBookings}/>\n        </Tab>/>\n        <Tab label={`Rejected(${rejectedCounter})`}>\n          <BookingTab bookings={rejectedBookings} />\n        </Tab>/>\n      </Tabs>\n    )\n  }\n}\n\n\n/**\n  * Display one tab of bookings\n  * @param {Object} props\n  * @param {Object} props.bookings - List of bookings\n  * @return {JSX} Return one tab of bookings\n  */\nconst BookingTab = ({bookings}) => {\n  return (\n    <ul className=\"booking-list\">\n      {bookings}\n    </ul>\n  )\n}\n\n\n/**\n  * Display a booking\n  * @param {Object} props\n  * @param {String} props.eventName - Name of the event\n  * @param {String} props.bandName - Name of the band\n  * @param {Date} props.from - Start date of the event\n  * @param {number} props.bandFee - Cost of the band\n  * @param {Object} props.bookingState\n  * @param {String} props.concertKey - ID of the concert\n  * @return {JSX} Return a booking\n  */\nexport const Booking = ({eventName, bandName, from, bandFee, bookingState, concertKey}) => {\n\n  /**\n    * Check if the booking time range does not crash with an existing concert.\n    * @param {Object} scene - ID of the scene of the concert\n    * @param {Moment} concertTimeRange - The range of the concert\n    * @return {Boolean} Whether the concert overlaps with an existing concert or not\n    */\n  const validateBooking = (scene, concertTimeRange) => {\n    const db = firebase.database()\n    const sceneRef = db.ref(`scenes/${scene}`)\n    let promises = []\n    return new Promise((resolve, reject) => {\n      sceneRef.once('value', snap => {\n        const {concerts} = snap.val()\n        concerts.forEach(concertKey => {\n          promises.push(db.ref(`concerts/${concertKey}`).once('value').then(snap => {\n            const {scene: currentScene} = snap.val()\n            if (currentScene === scene) {\n              const {from, to} = snap.val()\n              const existingConcertTimeRange = moment.range(new Date(from), new Date(to))\n              return concertTimeRange.overlaps(existingConcertTimeRange)\n            }\n            return false\n          }))\n        })\n      }).then(() => {\n        resolve(Promise.all(promises).then(result => result.some(e => e)))\n      })\n    })\n  }\n\n\n  /**\n    * Validate and write a booking to the database\n    * @param {Object} concert - ID of the concert\n    * @param {Boolean} isAcceptedByBookingBoss - Is the booking accepted or rejected by the booking boss\n    \n    */\n  const handleBooking = (concert, isAcceptedByBookingBoss) => {\n    const db = firebase.database()\n    const concertRef = db.ref(`concerts/${concert}`)\n    concertRef.once(\"value\").then(snap => {\n      const {scene, band, from, to} = snap.val()\n      const concertTimeRange = moment.range(new Date(from), new Date(to))\n\n      validateBooking(scene, concertTimeRange)\n        .then(isConcertCrash => {\n          if (!isConcertCrash || !isAcceptedByBookingBoss) {\n            if (isAcceptedByBookingBoss) {\n              // Update band.concerts list.\n              const bandConcertsRef = db.ref(`bands/${band}/concerts`)\n              bandConcertsRef.once('value').then(snap => {\n                const concerts = snap.val()\n                concerts.push(concert)\n                bandConcertsRef.set(concerts)\n              })\n              // Update scenes/concerts list.\n              const sceneConcertsRef = db.ref(`scenes/${scene}/concerts`)\n              sceneConcertsRef.once('value').then(snap => {\n                const concerts = snap.val()\n                concerts.push(concert)\n                sceneConcertsRef.set(concerts)\n              })\n\n            }\n            // Update isAcceptedByBookingBoss boolean.\n            concertRef.child('isAcceptedByBookingBoss').set(isAcceptedByBookingBoss)\n          } else {\n            // REVIEW: Better error handling\n            alert(\"This booking cannot be accepted, because it crashes with an existing concert. Please tell the booking manager.\");\n          }\n      })\n    })\n  }\n\n  let bookingStateAction = <div>\n    <RaisedButton className=\"accept-button\" label=\"Accept\" primary onClick={(id, isAccepted) => handleBooking(concertKey, true)}/>\n    <RaisedButton label=\"Reject\" secondary onClick={(id, isAccepted) => handleBooking(concertKey, false)}/>\n  </div>\n  let icon = \"bookmark_border\"\n  let color = \"\"\n  if (bookingState === true) {\n    bookingStateAction = \"Accepted\"\n    icon = \"done\"\n    color = \"green\"\n  } else if (bookingState === false) {\n    bookingStateAction = \"Rejected\"\n    icon = \"clear\"\n    color = \"red\"\n  }\n  return (\n    <li>\n      <div className=\"mdl-card mdl-shadow--2dp\">\n        <div className=\"booking-body mdl-card__title mdl-card--expand\">\n          <span className=\"booking-bg\"/>\n          <h4>{bandName} <br/>@<br/></h4>\n          <h5>\n            {eventName} <br/>\n            {parseDate(from)} - {parseTime(from)}\n            <br/>\n            {parsePrice(bandFee)}\n          </h5>\n        </div>\n        <div className=\"booking-footer mdl-card__actions mdl-card--border\">\n          {bookingStateAction}<div className=\"mdl-layout-spacer\"></div>\n          <i className={`material-icons ${color}`}>{icon}</i>\n        </div>\n      </div>\n    </li>\n  )\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/BookingBoss/Bookings.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "moment",
    "memberof": "src/components/BookingBoss/Bookings.jsx",
    "static": true,
    "longname": "src/components/BookingBoss/Bookings.jsx~moment",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/BookingBoss/Bookings.jsx",
    "importStyle": null,
    "description": "Create an instance of Moment.js",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "class",
    "name": "Bookings",
    "memberof": "src/components/BookingBoss/Bookings.jsx",
    "static": true,
    "longname": "src/components/BookingBoss/Bookings.jsx~Bookings",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/BookingBoss/Bookings.jsx",
    "importStyle": "Bookings",
    "description": "Bookings component",
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/BookingBoss/Bookings.jsx~Bookings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingBoss/Bookings.jsx~Bookings#render",
    "access": "public",
    "description": "Display bookings divided into three category, awating, accepted, rejected",
    "lineNumber": 27,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return bookings divided into three category, awating, accepted, rejected"
    },
    "params": []
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "BookingTab",
    "memberof": "src/components/BookingBoss/Bookings.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/BookingBoss/Bookings.jsx~BookingTab",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/BookingBoss/Bookings.jsx",
    "importStyle": null,
    "description": "Display one tab of bookings",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.bookings",
        "description": "List of bookings"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return one tab of bookings"
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "Booking",
    "memberof": "src/components/BookingBoss/Bookings.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/BookingBoss/Bookings.jsx~Booking",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/BookingBoss/Bookings.jsx",
    "importStyle": "{Booking}",
    "description": "Display a booking",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.eventName",
        "description": "Name of the event"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.bandName",
        "description": "Name of the band"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "props.from",
        "description": "Start date of the event"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "props.bandFee",
        "description": "Cost of the band"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.bookingState",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.concertKey",
        "description": "ID of the concert"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return a booking"
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/components/BookingBoss/index.js",
    "content": "import React, { Component } from 'react'\nimport Bookings, {Booking} from './Bookings'\nimport firebase from 'firebase'\n\n/**\n* This is the BookingBoss Component\n*/\n\nexport default class BookingBoss extends Component {\n\n  /**\n  * BookingBoss constructor\n  */\n\n  constructor() {\n    super()\n\n    /**\n    * Contain data that may change over time\n    * @type {Object} state\n    * @property {Object} state.concerts\n    * @property {Object} state.bands\n    */\n\n    this.state = {\n      concerts: {},\n      bands: {}\n    }\n  }\n\n/**\n* Fetch and Validate data\n*/\n\n  componentDidMount() {\n    const db = firebase.database().ref()\n    const concertsRef = db.child('concerts')\n    const bandsRef = db.child('bands')\n    const eventsRef = db.child('events')\n\n\n\n    let concerts = {}\n    concertsRef.on('value', snap => {\n      concerts = snap.val()\n      Object.keys(concerts).forEach(concertKey => {\n        const concert = concerts[concertKey]\n        const {event} = concert\n        eventsRef.child(event).on('value', snap => {\n          concert.eventName = snap.val().name\n          if (!snap.val().staff.bookingBoss.includes(this.props.user.uid)) {\n            delete concerts[concertKey]\n            this.setState({concerts})\n          }\n        })\n      })\n    })\n\n\n    bandsRef.on('value', snap => {\n      this.setState({\n        bands: snap.val()\n      })\n    })\n  }\n\n  /**\n    * Display the Booking Boss\n    * @return {JSX} Return the Booking Boss\n    */\n  render() {\n    const {bands, concerts} = this.state\n    const unhandledBookings = []\n    let unhandledCounter = 0\n    const acceptedBookings = []\n    let acceptedCounter = 0\n    const rejectedBookings = []\n    let rejectedCounter = 0\n    Object.keys(concerts).forEach(key => {\n      const concert = concerts[key]\n      const {eventName, band, bandFee, from, isAcceptedByBookingManager, isAcceptedByBookingBoss} = concert\n      const bandName = bands[band] && bands[band].name\n      const booking = <Booking\n        key={key}\n        {...{eventName, bandName, from, bandFee}}\n        concertKey={key}\n        bookingState={isAcceptedByBookingBoss}\n                      />\n      if (isAcceptedByBookingManager) {\n        if (isAcceptedByBookingBoss===\"unhandled\") {\n          unhandledBookings.push(booking)\n          unhandledCounter+=1\n        } else if (isAcceptedByBookingBoss) {\n          acceptedBookings.push(booking)\n          acceptedCounter+=1\n        } else {\n          rejectedBookings.push(booking)\n          rejectedCounter+=1\n        }\n      }\n    })\n    return (\n      <div className=\"booking-boss role\">\n\n        <Bookings {...{unhandledCounter, unhandledBookings, acceptedCounter, acceptedBookings, rejectedCounter, rejectedBookings}}/>\n      </div>\n    )\n  }\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/BookingBoss/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "BookingBoss",
    "memberof": "src/components/BookingBoss/index.js",
    "static": true,
    "longname": "src/components/BookingBoss/index.js~BookingBoss",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/BookingBoss/index.js",
    "importStyle": "BookingBoss",
    "description": "This is the BookingBoss Component",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 101,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/BookingBoss/index.js~BookingBoss",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingBoss/index.js~BookingBoss#constructor",
    "access": "public",
    "description": "BookingBoss constructor",
    "lineNumber": 15
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/BookingBoss/index.js~BookingBoss",
    "static": false,
    "longname": "src/components/BookingBoss/index.js~BookingBoss#state",
    "access": "public",
    "description": "Contain data that may change over time",
    "lineNumber": 25,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.concerts",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.bands",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/components/BookingBoss/index.js~BookingBoss",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingBoss/index.js~BookingBoss#componentDidMount",
    "access": "public",
    "description": "Fetch and Validate data",
    "lineNumber": 35,
    "params": [],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/BookingBoss/index.js~BookingBoss",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingBoss/index.js~BookingBoss#render",
    "access": "public",
    "description": "Display the Booking Boss",
    "lineNumber": 71,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return the Booking Boss"
    },
    "params": []
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/components/BookingManager/BookingStepper.jsx",
    "content": "import React, {Component} from 'react'\nimport TextField from 'material-ui/TextField'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport FlatButton from 'material-ui/FlatButton'\nimport AutoComplete from 'material-ui/AutoComplete'\nimport DatePickerDialog from 'material-ui/DatePicker/DatePickerDialog'\nimport TimePickerDialog from 'material-ui/TimePicker/TimePickerDialog'\nimport DateTimePicker from 'material-ui-datetimepicker'\nimport MenuItem from 'material-ui/MenuItem'\nimport SelectField from 'material-ui/SelectField'\nimport {Step, StepLabel, Stepper, StepContent} from 'material-ui/Stepper'\nimport {Icon, parsePrice} from '../../utils'\n\nimport Moment from 'moment'\nimport { extendMoment } from 'moment-range'\n\n/**\n  * Create a Moment.js instance\n  */\nconst moment = extendMoment(Moment)\n\n\n/**\n  * VerticalLinearStepper component\n  */\nexport default class VerticalLinearStepper extends Component {\n\n  /**\n    * VerticalLinearStepper constructor\n    */\n  constructor() {\n    super()\n\n    /**\n      * @type {Object} state\n      * @property {number} state.stepIndex - Active step's index\n      * @property {String} state.bandName - Name of the band\n      * @property {Object} state.band - Band\n      * @property {number} state.bandFee - Cost of the band\n      * @property {Object} state.currentEvent - Current event\n      * @property {Object} state.event - Event\n      * @property {Object} state.scene - Scene\n      * @property {Date} state.from - Event's start date\n      * @property {Date} state.to - Event's end date\n      * @property {Object} state.technician - Technician for the booking\n      * @property {Array} state.stepDisabled - List of steps that are currently disabled\n      */\n    this.state = {\n      stepIndex: 0,\n      bandName: \"\",\n      band: null,\n      bandFee: null,\n      currentEvent: null,\n      event: null,\n      scene: null,\n      from: Date.now(),\n      to: null,\n      technician: null,\n      stepDisabled: Array(6).fill(true)\n    }\n  }\n\n  /**\n    * Handle stepping\n    * @param {number} stepIndex - Index of the step\n\n    */\n  handleStepChange = (stepIndex) => {\n    let {stepDisabled} = this.state\n    stepDisabled[stepIndex] = false\n    this.setState({stepDisabled})\n  }\n\n  /**\n    * Handle band change\n    * @param {Object} element - Element that was clicked\n    * @param {number} index - Index of the band\n\n    */\n  handleBandChange = (element, index) => {\n    const {bands, bandNames} = this.props\n    Object.keys(bands).forEach(bandKey => {\n      if (bandNames[index] === bands[bandKey].name) {\n        this.setState({band: bandKey})\n      }\n    })\n    this.handleStepChange(0)\n  }\n\n  /**\n    * Handle band search input field change\n    * @param {String} index - Searched value\n\n    */\n  handleBandSearchText = bandName => this.setState({bandName})\n\n  /**\n    * Handle band fee change\n    * @param {Object} e - Element that was clicked\n\n    */\n  handleBandFeeChange = e => {\n    const bandFee = Number(e.target.value)\n    this.setState({bandFee})\n    this.handleStepChange(1)\n  }\n\n\n  /**\n    * Select an event from the dropdown\n    * @param {Object} event - Element that was clicked\n    * @param {number} index - Index of the clicked event\n    * @param {String} value - ID of the clicked event\n\n    */\n  handleEventChange = (event, index, value) => {\n    this.setState({\n      currentEvent: this.props.events[value],\n      event: value\n    })\n    this.handleStepChange(2)\n  }\n\n  /**\n    * Select a scene from the dropdown\n    * @param {Object} event - Element that was clicked\n    * @param {number} index - Index of the clicked scene\n    * @param {String} value - ID of the clicked scene\n\n    */\n  handleSceneChange = (event, index, value) => {\n    this.setState({scene: value})\n    this.handleStepChange(3)\n  }\n\n  /**\n    * Sets the date input as a UNIX timestamp to this.state.from.\n    * @param {Date} date - Start date\n\n    */\n  handleStartDateChange = date => {\n    this.setState({from: date.getTime()})\n    this.handleStepChange(4)\n  }\n\n  /**\n    * Limits the acceptable dates in date picker\n    * @param {Date} date - Date\n    * @return {Boolean} Whether a date can be chosen or not\n    */\n  limitAcceptedDates = date => {\n    let {from, to} = this.state.currentEvent\n    const day = moment(date)\n    // Substract one day from 'from' to include the first day of the concert\n    const eventRange = moment.range(from-(60*60*1000*24), to)\n    return !day.within(eventRange)\n  }\n\n  /**\n    * Validate and handle concert length change\n    * @param {Object} e - Element that was clicked\n\n    */\n  handleConcertLengthChange = e => {\n    const hours = Number(e.target.value)*60*60*1000\n    const {from} = this.state\n    const to = from + hours\n    if (from < to) {\n      this.setState({to})\n      this.handleStepChange(5)\n    }\n  }\n\n  /**\n    * Select a technician from the dropdown\n    * @param {Object} event - Element that was clicked\n    * @param {number} index - Index of the clicked technician\n    * @param {String} value - ID of the clicked technician\n\n    */\n  handleTechnicianChange = (event, index, value) => {\n    this.setState({technician: value})\n    this.handleStepChange(6)\n  }\n\n  /**\n    * Go to the next step\n    */\n  handleNext = () => {\n    const {stepIndex,\n      band, bandFee,\n      event, from, to,\n      scene, technician\n    } = this.state\n    this.setState({\n      stepIndex: stepIndex + 1\n    })\n    if (stepIndex === 6) {\n      this.props.createBooking({\n        band, bandFee,\n        event,\n        from, to,\n        scene,\n        technicians: {\n          [technician]: {\n            isAttending: false\n          }\n        },\n        ticketPrice: 0,\n        isAcceptedByBookingBoss : \"unhandled\",\n        isAcceptedByBookingManager : true,\n        participants : 0\n      })\n    }\n  }\n\n  /**\n    * Go to the previous step\n    */\n  handlePrev = () => {\n    const {stepIndex} = this.state\n    if (stepIndex > 0) {\n      this.setState({stepIndex: stepIndex - 1})\n    }\n  }\n\n  /**\n    * Display step actions\n    * @return {JSX} Return step actions\n    */\n  renderStepActions(step) {\n    const {stepIndex, stepDisabled} = this.state\n    return (\n      <div style={{margin: '12px 0'}}>\n        {stepIndex < 7 &&\n          <RaisedButton\n            label={'Next'}\n            disableTouchRipple\n            disableFocusRipple\n            primary\n            disabled={stepDisabled[stepIndex]}\n            onClick={this.handleNext}\n            style={{marginRight: 12}}\n          />\n        }\n        {step > 0 && (\n          <FlatButton\n            label=\"Back\"\n            disabled={stepIndex === 0}\n            disableTouchRipple\n            disableFocusRipple\n            onClick={this.handlePrev}\n          />\n        )}\n      </div>\n    )\n  }\n\n  /**\n    * Display VerticalLinearStepper\n    * @return {JSX} Return VerticalLinearStepper\n    */\n  render() {\n    const {\n      stepIndex, stepDisabled,\n      bandName, bandFee,\n      event, currentEvent,\n      scene,\n      from,\n      technician\n    } = this.state\n    const {bandNames, events, scenes, technicians} = this.props\n\n    return (\n      <div>\n        <Stepper activeStep={stepIndex} orientation=\"vertical\">\n          <Step>\n            <StepLabel icon={<Icon name=\"star\"/>}>Select a band {bandName !== \"\" && `(${bandName})`}</StepLabel>\n            <StepContent>\n              <p>Which band you want to book a concert for?</p>\n              <AutoComplete\n                filter={AutoComplete.fuzzyFilter}\n                onUpdateInput={this.handleBandSearchText}\n                searchText={bandName}\n                dataSource={bandNames}\n                floatingLabelText=\"Band\"\n                maxSearchResults={7}\n                onNewRequest={this.handleBandChange}\n              />\n              {this.renderStepActions(0)}\n            </StepContent>\n          </Step>\n          <Step>\n            <StepLabel icon={<Icon name=\"monetization_on\"/>}>Set the band fee {bandFee && `(${parsePrice(bandFee)})`}</StepLabel>\n            <StepContent>\n              <p>How much money the band will earn on the concert?</p>\n              <TextField\n                hintText=\"(NOK)\"\n                onChange={this.handleBandFeeChange}\n                type=\"number\"\n                min={1}\n                value={bandFee ? bandFee : \"\"}\n              />\n              {this.renderStepActions(1)}\n            </StepContent>\n          </Step>\n          <Step>\n            <StepLabel icon={<Icon name=\"event\"/>}>Select an event {event && `(${currentEvent.name})`}</StepLabel>\n            <StepContent>\n              <p>On which event do you want the band to play?</p>\n              {!stepDisabled[1] &&\n                <SelectField\n                  value={event}\n                  onChange={this.handleEventChange}\n                >\n                  <MenuItem key={\"Event\"} value={null} primaryText=\"Event\"/>\n                  {events && Object.keys(events).map(eventKey => (\n                    <MenuItem\n                      key={eventKey}\n                      value={eventKey}\n                      primaryText={events[eventKey].name}\n                    />))\n                  }\n                </SelectField>\n              }\n              {this.renderStepActions(2)}\n            </StepContent>\n          </Step>\n          <Step>\n            <StepLabel icon={<Icon name=\"account_balance\"/>}>Select a scene {scene && `(${scenes[scene].name})`}</StepLabel>\n            <StepContent>\n              <p>On which scene do you want the band to play?</p>\n              {!stepDisabled[2] &&\n                <SelectField\n                  value={scene}\n                  onChange={this.handleSceneChange}>\n                  <MenuItem key={\"Scene\"} value={null} primaryText=\"Scene\"/>\n                  {currentEvent && currentEvent.scenes.map(key => (\n                    <MenuItem\n                      key={key}\n                      value={key}\n                      primaryText={scenes[key].name}\n                    />))\n                  }\n                </SelectField>\n              }\n              {this.renderStepActions(3)}\n            </StepContent>\n          </Step>\n          <Step>\n            <StepLabel icon={<Icon name=\"date_range\"/>}>Set start date</StepLabel>\n            <StepContent>\n              <p>Please specify when should the band start.</p>\n              <label htmlFor=\"start-date\">Start date: </label>\n              {!stepDisabled[3] &&\n                <DateTimePicker\n                  DatePicker={DatePickerDialog}\n                  TimePicker={TimePickerDialog}\n                  id=\"start-date\"\n                  format='YYYY-MM-DD hh:mm'\n                  hintText=\"Start date\"\n\n                  // REVIEW: Waiting for node module to be updated\n                  // https://github.com/dmtrKovalenko/material-ui-datetimepicker/issues/17\n                  /* autoOk */\n\n                  defaultTime={new Date(events[event].from)}\n                  value={from ? new Date(from) : new Date(events[event].from)}\n                  minutesStep={30}\n                  onChange={this.handleStartDateChange}\n                  shouldDisableDate={this.limitAcceptedDates}/>\n              }\n              {this.renderStepActions(4)}\n            </StepContent>\n          </Step>\n          <Step>\n            <StepLabel icon={<Icon name=\"timelapse\"/>}>Concert length</StepLabel>\n            <StepContent>\n              <p>Please specify the length of the concert</p>\n              {!stepDisabled[4] &&\n                <TextField\n                  id=\"concert-length\"\n                  hintText=\"(hours)\"\n                  type=\"number\"\n                  min={1}\n                  onChange={this.handleConcertLengthChange}\n                />\n              }\n              {this.renderStepActions(5)}\n            </StepContent>\n          </Step>\n          <Step>\n            <StepLabel icon={<Icon name=\"settings_input_component\"/>}>Select a technician</StepLabel>\n            <StepContent>\n              <p>Please select an audio/light technician who will prepare the scene for the concert.</p>\n              {!stepDisabled[5] &&\n                <SelectField\n                  value={technician}\n                  onChange={this.handleTechnicianChange}>\n                  <MenuItem key={0} value={null} primaryText=\"Technician\"/>\n                  {currentEvent.staff.technicians.map(key => (\n                    <MenuItem\n                      key={key}\n                      value={key}\n                      primaryText={technicians[key].name}\n                    />))\n                  }\n                </SelectField>\n              }\n              {this.renderStepActions(6)}\n            </StepContent>\n          </Step>\n          <Step>\n            <StepLabel icon={<Icon name=\"done_all\"/>}>Almost done...</StepLabel>\n            <StepContent>\n              <p>Please send your booking request to the Booking Boss for approval.</p>\n              {this.renderStepActions(7)}\n            </StepContent>\n          </Step>\n        </Stepper>\n      </div>\n    )\n  }\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/BookingManager/BookingStepper.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "moment",
    "memberof": "src/components/BookingManager/BookingStepper.jsx",
    "static": true,
    "longname": "src/components/BookingManager/BookingStepper.jsx~moment",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/BookingManager/BookingStepper.jsx",
    "importStyle": null,
    "description": "Create a Moment.js instance",
    "lineNumber": 20,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "class",
    "name": "VerticalLinearStepper",
    "memberof": "src/components/BookingManager/BookingStepper.jsx",
    "static": true,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/BookingManager/BookingStepper.jsx",
    "importStyle": "VerticalLinearStepper",
    "description": "VerticalLinearStepper component",
    "lineNumber": 26,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 108,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#constructor",
    "access": "public",
    "description": "VerticalLinearStepper constructor",
    "lineNumber": 31
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#state",
    "access": "public",
    "description": "",
    "lineNumber": 48,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "state.stepIndex",
        "description": "Active step's index"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state.bandName",
        "description": "Name of the band"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.band",
        "description": "Band"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "state.bandFee",
        "description": "Cost of the band"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.currentEvent",
        "description": "Current event"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.event",
        "description": "Event"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.scene",
        "description": "Scene"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "state.from",
        "description": "Event's start date"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "state.to",
        "description": "Event's end date"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.technician",
        "description": "Technician for the booking"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "state.stepDisabled",
        "description": "List of steps that are currently disabled"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "handleStepChange",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#handleStepChange",
    "access": "public",
    "description": "Handle stepping",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "stepIndex",
        "description": "Index of the step"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "handleBandChange",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#handleBandChange",
    "access": "public",
    "description": "Handle band change",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "Element that was clicked"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Index of the band"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "handleBandSearchText",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#handleBandSearchText",
    "access": "public",
    "description": "Handle band search input field change",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Searched value"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "handleBandFeeChange",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#handleBandFeeChange",
    "access": "public",
    "description": "Handle band fee change",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Element that was clicked"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "handleEventChange",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#handleEventChange",
    "access": "public",
    "description": "Select an event from the dropdown",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Element that was clicked"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Index of the clicked event"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "ID of the clicked event"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "handleSceneChange",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#handleSceneChange",
    "access": "public",
    "description": "Select a scene from the dropdown",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Element that was clicked"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Index of the clicked scene"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "ID of the clicked scene"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "handleStartDateChange",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#handleStartDateChange",
    "access": "public",
    "description": "Sets the date input as a UNIX timestamp to this.state.from.",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "Start date"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "limitAcceptedDates",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#limitAcceptedDates",
    "access": "public",
    "description": "Limits the acceptable dates in date picker",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "Date"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether a date can be chosen or not"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "handleConcertLengthChange",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#handleConcertLengthChange",
    "access": "public",
    "description": "Validate and handle concert length change",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Element that was clicked"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "handleTechnicianChange",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#handleTechnicianChange",
    "access": "public",
    "description": "Select a technician from the dropdown",
    "lineNumber": 181,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Element that was clicked"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Index of the clicked technician"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "ID of the clicked technician"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "handleNext",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#handleNext",
    "access": "public",
    "description": "Go to the next step",
    "lineNumber": 189,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "handlePrev",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#handlePrev",
    "access": "public",
    "description": "Go to the previous step",
    "lineNumber": 220,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "renderStepActions",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#renderStepActions",
    "access": "public",
    "description": "Display step actions",
    "lineNumber": 231,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return step actions"
    },
    "params": [
      {
        "name": "step",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingManager/BookingStepper.jsx~VerticalLinearStepper#render",
    "access": "public",
    "description": "Display VerticalLinearStepper",
    "lineNumber": 263,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return VerticalLinearStepper"
    },
    "params": []
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "src/components/BookingManager/NewBooking.jsx",
    "content": "import React, {Component} from 'react'\nimport Dialog from 'material-ui/Dialog'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport FlatButton from 'material-ui/FlatButton'\nimport FloatingActionButton from 'material-ui/FloatingActionButton'\nimport ContentAdd from 'material-ui/svg-icons/content/add'\nimport IconButton from 'material-ui/IconButton'\nimport FontIcon from 'material-ui/FontIcon'\nimport firebase from 'firebase'\nimport BookingStepper from './BookingStepper'\n\n\n/**\n  * NewBooking component\n  */\nexport default class NewBooking extends Component {\n\n  /**\n    * NewBooking constructor\n    */\n  constructor() {\n    super()\n\n    /**\n      * Set this.state to initialState\n      * @type {Object} state\n      */\n    this.state = {\n      open: false,\n      canSubmit: false,\n      newConcert: {}\n    }\n  }\n\n  /**\n    * Open new booking\n    */\n  handleOpen = () => this.setState({open: true})\n\n  /**\n    * Close new booking\n    */\n  handleClose = () => this.setState({open: false})\n\n  /**\n    * Reset new booking\n    */\n  resetBooking = () => this.setState({\n    open: false,\n    canSubmit: false,\n    newConcert: {}\n  }, () => this.handleClose())\n\n\n  /**\n    * Save new concert to this.state\n    * @param {Object} newConcert - New concert to write to the database\n    */\n  createBooking = newConcert => {\n    this.setState({\n      newConcert,\n      canSubmit: true\n    })\n  }\n\n  /**\n    * Write new concert to the database\n    */\n  submitBooking = () => {\n    firebase.database().ref('concerts')\n    .push(this.state.newConcert)\n    .then(() => {\n      this.resetBooking()\n    })\n  }\n\n  /**\n    * Display New booking\n    * @return {JSX} Return New booking\n    */\n  render() {\n    const {open, canSubmit} = this.state\n    const {bands, events, scenes, technicians} = this.props\n    const bandNames = bands ? Object.keys(bands).map(bandKey => bands[bandKey].name) : []\n\n    /**\n      * The submit and cancel buttons for New Booking\n      */\n    const actions = [\n      <FlatButton\n        label=\"Cancel\"\n        secondary\n        onClick={this.resetBooking}\n      />,\n      <RaisedButton\n        style={{marginLeft: \"1em\"}}\n        label=\"Send request\"\n        primary\n        disabled={!canSubmit}\n        onClick={this.submitBooking}\n      />,\n    ]\n\n    return (\n      <div>\n        <FloatingActionButton\n          className=\"new-booking-fab\"\n          secondary\n          onClick={this.handleOpen}>\n          <ContentAdd/>\n        </FloatingActionButton>\n        <Dialog\n          className=\"new-booking\"\n          autoScrollBodyContent modal\n          {...{actions, open}}\n        >\n          <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\"}}>\n            <h4> New Concert</h4>\n            <IconButton\n              onClick={this.handleClose}\n            >\n              <FontIcon\n                style={{color: '#000'}} className='material-icons'>close</FontIcon>\n            </IconButton>\n          </div>\n\n          <BookingStepper\n            {...{events, bands, bandNames, scenes, technicians}}\n            createBooking={this.createBooking}/>\n        </Dialog>\n      </div>\n    )\n  }\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/BookingManager/NewBooking.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "class",
    "name": "NewBooking",
    "memberof": "src/components/BookingManager/NewBooking.jsx",
    "static": true,
    "longname": "src/components/BookingManager/NewBooking.jsx~NewBooking",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/BookingManager/NewBooking.jsx",
    "importStyle": "NewBooking",
    "description": "NewBooking component",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 126,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/BookingManager/NewBooking.jsx~NewBooking",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingManager/NewBooking.jsx~NewBooking#constructor",
    "access": "public",
    "description": "NewBooking constructor",
    "lineNumber": 21
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/BookingManager/NewBooking.jsx~NewBooking",
    "static": false,
    "longname": "src/components/BookingManager/NewBooking.jsx~NewBooking#state",
    "access": "public",
    "description": "Set this.state to initialState",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "handleOpen",
    "memberof": "src/components/BookingManager/NewBooking.jsx~NewBooking",
    "static": false,
    "longname": "src/components/BookingManager/NewBooking.jsx~NewBooking#handleOpen",
    "access": "public",
    "description": "Open new booking",
    "lineNumber": 38,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "handleClose",
    "memberof": "src/components/BookingManager/NewBooking.jsx~NewBooking",
    "static": false,
    "longname": "src/components/BookingManager/NewBooking.jsx~NewBooking#handleClose",
    "access": "public",
    "description": "Close new booking",
    "lineNumber": 43,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "resetBooking",
    "memberof": "src/components/BookingManager/NewBooking.jsx~NewBooking",
    "static": false,
    "longname": "src/components/BookingManager/NewBooking.jsx~NewBooking#resetBooking",
    "access": "public",
    "description": "Reset new booking",
    "lineNumber": 48,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "createBooking",
    "memberof": "src/components/BookingManager/NewBooking.jsx~NewBooking",
    "static": false,
    "longname": "src/components/BookingManager/NewBooking.jsx~NewBooking#createBooking",
    "access": "public",
    "description": "Save new concert to this.state",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newConcert",
        "description": "New concert to write to the database"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "submitBooking",
    "memberof": "src/components/BookingManager/NewBooking.jsx~NewBooking",
    "static": false,
    "longname": "src/components/BookingManager/NewBooking.jsx~NewBooking#submitBooking",
    "access": "public",
    "description": "Write new concert to the database",
    "lineNumber": 69,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/BookingManager/NewBooking.jsx~NewBooking",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingManager/NewBooking.jsx~NewBooking#render",
    "access": "public",
    "description": "Display New booking",
    "lineNumber": 81,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return New booking"
    },
    "params": []
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "src/components/BookingManager/Search.jsx",
    "content": "import React, { Component } from 'react'\nimport MenuItem from 'material-ui/MenuItem'\nimport TextField from 'material-ui/TextField'\nimport {Icon} from '../../utils'\nimport SelectField from 'material-ui/SelectField'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport {Toolbar, ToolbarGroup, ToolbarTitle} from 'material-ui/Toolbar'\nimport Band from '../Band'\nimport {Loading, NoResult} from '../../utils'\nimport Masonry from 'react-masonry-css'\n\n\n/**\n  * Search component\n  */\nexport default class Search extends Component{\n  /**\n    * Search constructor\n    * @param {Object} props\n    */\n  constructor(props) {\n    super(props)\n    const {bands, concerts, events, scenes} = props\n\n    /**\n      * @type {Object} state\n      * @property {String} state.query - Search query\n      * @property {String} state.genre - Genre of the band\n      * @property {String} state.event - ID of the event the band plays on\n      * @property {String} state.scene - ID of the scene the band plays on\n      * @property {String} state.sortBy - Sorting criteria\n      * @property {Boolean} state.isIncrease - Whether sort increasing or decreasing\n      * @property {Object} state.bands - List of bands\n      * @property {Object} state.concerts - List of concerts\n      * @property {Object} state.events - List of events\n      * @property {Object} state.scenes - List of scenes\n      * @property {Array} state.bandsToOutput - List of bands to render\n      */\n    this.state = {\n      query: \"\",\n      genre: null,\n      event: null,\n      scene: null,\n      sortBy: \"\",\n      isIncrease: false,\n      bands,\n      concerts,\n      events,\n      scenes,\n      bandsToOutput : bands ? Object.keys(bands) : null\n    }\n\n\n  }\n\n  /**\n    * When the component recieves new props, update the state\n    * @param {Object} props\n    * @param {Object} props.bands - List of bands\n    * @param {Object} props.concerts - List of concerts\n    * @param {Object} props.events - List of events\n    * @param {Object} props.scenes - List of scenes\n    * @param {String} props.name - Name of the reviewer\n    */\n  componentWillReceiveProps({bands, concerts, events, scenes, name}) {\n    if (bands && concerts && name) {\n      this.setState({\n        bands,\n        bandsToOutput: Object.keys(bands),\n        concerts,\n        events,\n        scenes,\n        name\n      })\n    }\n    else this.setState({bandsToOutput: null})\n  }\n\n  /**\n    * Reset all the filters\n    */\n  resetFilters = () => {\n    this.setState({\n      query: \"\",\n      event: null,\n      scene: null,\n      genre: null\n    })\n    this.handleFilters(\"event\", null)\n  }\n\n  /**\n    * Handle filters\n    * @param {String} filterBy - Filtering criteria\n    * @param {String} value - Filtering ID\n    */\n  handleFilters = (filterBy, value) => {\n    if (filterBy === \"event\") {\n      this.setState({scene: null})\n    }\n    this.setState({[filterBy]: value}, () => {\n      const {\n        bands, concerts,\n        query, event, scene, genre\n      } = this.state\n\n      let bandsToOutput = Object.keys(bands)\n      bandsToOutput = bandsToOutput\n      // Filter by Search query\n      .filter(bandKey => bands[bandKey].name.toLowerCase().includes(query))\n      // Filter by genre\n      .filter(bandKey => (genre ? bands[bandKey].genre === genre : bandKey))\n      //Filter by event\n\n      .filter(bandKey => (event ?\n        bands[bandKey].concerts.some(concertKey => concerts[concertKey] && concerts[concertKey].event === event) : bandKey\n      ))\n      // Filter by scene\n      .filter(bandKey => (scene ?\n        bands[bandKey].concerts.some(concertKey => concerts[concertKey] && concerts[concertKey].scene === scene) : bandKey\n      ))\n\n      this.setState({bandsToOutput})\n    })\n  }\n\n  /**\n    * Handle sorting\n    * @param {String} sortBy - Sorting criteria\n    * @param {Boolean} value - Whether sort increasing or decreasing\n    */\n  handleSorters = (sortBy, isIncrease) => {\n    let {bands, bandsToOutput} = this.state\n    let filtered = bandsToOutput.map(bandKey => [bandKey, bands[bandKey]])\n    filtered.sort((a, b) => ( isIncrease ?\n      a[1][sortBy].toString().localeCompare(b[1][sortBy].toString()):\n      b[1][sortBy].toString().localeCompare(a[1][sortBy].toString())\n    ))\n    bandsToOutput = filtered.map(band => band[0])\n    this.setState({bandsToOutput, isIncrease})\n  }\n\n\n  /**\n    * Display Search\n    * @return {JSX} Return Search\n    */\n   render(){\n    const {\n      query,\n      isIncrease,\n      bands, bandsToOutput,\n      events, scenes,\n      event, scene, genre,\n      name: reviewerName\n    } = this.state\n\n    let concerts = {...this.state.concerts}\n\n    if (event) {\n      Object.keys(concerts).forEach(concertKey => {\n        const filteredConcert = concerts[concertKey]\n        if (filteredConcert.event !== event) {\n          delete concerts[concertKey]\n        }\n        if (scene) {\n          if (filteredConcert.scene !== scene) {\n            delete concerts[concertKey]\n          }\n        }\n      })\n    }\n\n     return(\n       <div>\n         <Toolbar>\n           <div style={{width: \"100%\",display: \"flex\", alignItems: \"center\"}}>\n             <TextField\n               fullWidth\n               hintText=\"Search for band\"\n               value={query}\n               onChange={({target:{value}}) => this.handleFilters(\"query\", value.toLowerCase())}\n             />\n             <Icon name=\"search\" color=\"grey\"/>\n           </div>\n         </Toolbar>\n         <Toolbar >\n           <ToolbarGroup>\n             <ToolbarTitle text=\"Filter\"/>\n             <SelectField\n               value={event}\n               onChange={(event, index, value) => this.handleFilters(\"event\", value)}\n             >\n               <MenuItem key=\"All events\" value={null} primaryText=\"All events\"/>\n               {events && Object.keys(events).map(eventKey => (\n                 <MenuItem\n                   key={eventKey}\n                   value={eventKey}\n                   primaryText={events[eventKey].name}\n                 />\n               )\n               )}\n             </SelectField>\n             <SelectField\n               value={scene}\n               onChange={(event, index, value) => this.handleFilters(\"scene\", value)}\n             >\n               <MenuItem key=\"All scene\" value={null} primaryText=\"All scene\"/>\n               {event && events[event].scenes.map(sceneKey => (\n                 <MenuItem\n                   key={sceneKey}\n                   value={sceneKey}\n                   primaryText={scenes[sceneKey].name}\n                 />\n               ))}\n             </SelectField>\n             <SelectField value={genre} onChange={(event, index, value) => this.handleFilters(\"genre\", value)} >\n               <MenuItem value={null} primaryText=\"All genres\" />\n               <MenuItem value={\"Pop\"} primaryText=\"Pop\" />\n               <MenuItem value={\"Rock\"} primaryText=\"Rock\" />\n               <MenuItem value={\"Electric\"} primaryText=\"Electric\" />\n               <MenuItem value={\"Rap\"} primaryText=\"Rap\" />\n               <MenuItem value={\"RnB\"} primaryText=\"RnB\" />\n             </SelectField>\n           </ToolbarGroup>\n           <ToolbarGroup>\n             <RaisedButton label=\"Reset filters\" onClick={this.resetFilters} primary/>\n             {bandsToOutput && `${bandsToOutput.length} result(s)`}\n           </ToolbarGroup>\n         </Toolbar>\n         <Toolbar>\n           <ToolbarGroup>\n             <ToolbarTitle text=\"Sort by\"/>\n             <div style={{display: \"flex\", cursor: \"pointer\"}} onClick={() => this.handleSorters(\"name\", !isIncrease)}>\n               <p>Name</p>\n               <Icon name=\"sort_by_alpha\"/>\n             </div>\n             <div style={{display: \"flex\", cursor: \"pointer\"}} onClick={() => this.handleSorters(\"genre\", !isIncrease)}>\n               <p>Genre</p>\n               <Icon name=\"sort\"/>\n             </div>\n           </ToolbarGroup>\n         </Toolbar>\n         <Masonry\n           breakpointCols={{\n             default: 2,\n             960: 1\n           }}\n           style={{\n             margin: \"0 auto\",\n             paddingLeft: 20,\n             display: \"flex\",\n             width: \"100vw\"\n           }}\n           columnClassName=\"band-list-column\"\n         >\n           {bandsToOutput ?\n             bandsToOutput.map(bandKey => {\n               const band = bands[bandKey]\n               const {name, genre} = band\n               return(\n                 <Band\n                   key={bandKey}\n                   headerType={'big'}\n                   title={name}\n                   subtitle={genre}\n                   showAlbumSales showMonthlyListeners showGenre showManager\n                   showPreviousConcerts showFutureConcerts\n                   showRequirements\n                   canAddReview\n                   {...{bandKey, band, concerts, reviewerName}}\n                 />\n               )\n             }) :\n             <Loading/>\n           }\n         </Masonry>\n         {bandsToOutput && !bandsToOutput.length && <NoResult text={\"This is not the search result you are looking for.\"}/>}\n       </div>\n     )}\n }\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/BookingManager/Search.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "class",
    "name": "Search",
    "memberof": "src/components/BookingManager/Search.jsx",
    "static": true,
    "longname": "src/components/BookingManager/Search.jsx~Search",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/BookingManager/Search.jsx",
    "importStyle": "Search",
    "description": "Search component",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 136,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/BookingManager/Search.jsx~Search",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingManager/Search.jsx~Search#constructor",
    "access": "public",
    "description": "Search constructor",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/BookingManager/Search.jsx~Search",
    "static": false,
    "longname": "src/components/BookingManager/Search.jsx~Search#state",
    "access": "public",
    "description": "",
    "lineNumber": 39,
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state.query",
        "description": "Search query"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state.genre",
        "description": "Genre of the band"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state.event",
        "description": "ID of the event the band plays on"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state.scene",
        "description": "ID of the scene the band plays on"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state.sortBy",
        "description": "Sorting criteria"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "state.isIncrease",
        "description": "Whether sort increasing or decreasing"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.bands",
        "description": "List of bands"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.concerts",
        "description": "List of concerts"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.events",
        "description": "List of events"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.scenes",
        "description": "List of scenes"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "state.bandsToOutput",
        "description": "List of bands to render"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "src/components/BookingManager/Search.jsx~Search",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingManager/Search.jsx~Search#componentWillReceiveProps",
    "access": "public",
    "description": "When the component recieves new props, update the state",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.bands",
        "description": "List of bands"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.concerts",
        "description": "List of concerts"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.events",
        "description": "List of events"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.scenes",
        "description": "List of scenes"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.name",
        "description": "Name of the reviewer"
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "resetFilters",
    "memberof": "src/components/BookingManager/Search.jsx~Search",
    "static": false,
    "longname": "src/components/BookingManager/Search.jsx~Search#resetFilters",
    "access": "public",
    "description": "Reset all the filters",
    "lineNumber": 82,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "handleFilters",
    "memberof": "src/components/BookingManager/Search.jsx~Search",
    "static": false,
    "longname": "src/components/BookingManager/Search.jsx~Search#handleFilters",
    "access": "public",
    "description": "Handle filters",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filterBy",
        "description": "Filtering criteria"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Filtering ID"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "handleSorters",
    "memberof": "src/components/BookingManager/Search.jsx~Search",
    "static": false,
    "longname": "src/components/BookingManager/Search.jsx~Search#handleSorters",
    "access": "public",
    "description": "Handle sorting",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "sortBy",
        "description": "Sorting criteria"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Whether sort increasing or decreasing"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/BookingManager/Search.jsx~Search",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingManager/Search.jsx~Search#render",
    "access": "public",
    "description": "Display Search",
    "lineNumber": 148,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return Search"
    },
    "params": []
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/components/BookingManager/index.js",
    "content": "import React, { Component } from 'react'\nimport firebase from 'firebase'\nimport Search from './Search'\nimport NewBooking from './NewBooking'\n// import PreviousConcerts from './PreviousConcerts'\n\n/**\n* This is the BookingManager Component\n*/\n\nexport default class BookingManager extends Component {\n\n  /**\n  * BookingManager constructor\n  */\n\n  constructor() {\n    super()\n\n    /**\n    * Contain data that may change over time\n    * @type {Object} state\n    * @property {Object} state.events\n    * @property {Object} state.scenes\n    * @property {Object} state.concerts\n    * @property {Object} state.technicians\n    * @property {Object} state.bands\n    * @property {Array} state.bandKeys\n    * @property {String} state.openedMenuItem\n    */\n\n    this.state = {\n      events: null,\n      scenes: {},\n      concerts: {},\n      technicians: {},\n      bands: null,\n      bandKeys: [],\n      openedMenuItem: \"search\"\n    }\n  }\n\n/**\n* Fetch and Validate Data\n*/\n\ncomponentDidMount(){\n\n  const db = firebase.database().ref()\n  const eventsRef = db.child('events')\n  const scenesRef = db.child('scenes')\n  const concertsRef = db.child('concerts')\n  const bandsRef = db.child('bands')\n  const profilesRef = db.child('staff/profiles')\n\n  eventsRef.on('value', snap => {\n    const events = snap.val()\n    Object.keys(events).forEach(eventKey => {\n      const event = events[eventKey]\n      if (event.staff.bookingManager.includes(this.props.user.uid)) {\n        if (Date.now() <= event.from) {\n          this.setState(({upcomingEvents}) => ({\n            upcomingEvents: {\n              ...upcomingEvents,\n              [eventKey]: event\n            }\n          }))\n        } else {\n          this.setState(({previousEvents}) => ({\n            previousEvents: {\n              ...previousEvents,\n              [eventKey]: event\n            }\n          }))\n        }\n      }\n    })\n  })\n\n  bandsRef.on('value', snap => this.setState({bands: snap.val()}))\n\n  scenesRef.on('value', snap => this.setState({scenes: snap.val()}))\n\n  concertsRef.on('value', snap => {\n    const concerts = snap.val()\n    Object.keys(concerts).forEach(key => {\n      const concert = concerts[key]\n      const {technicians} = concert\n      Object.keys(technicians).forEach((technicianKey, i) => {\n        profilesRef.child(technicianKey).on('value', snap => {\n          if (i === 0) {\n            concerts[key].contact = `${snap.val().img}@tech.com`\n          }\n          this.setState(({technicians}) => ({\n            technicians: {\n              ...technicians,\n              [technicianKey]: snap.val()\n            }\n          }))\n        })\n      })\n    })\n    this.setState({concerts})\n  })\n}\n\n/**\n  * @deprecated Change page to display after item in left menui is clicked\n  * @param {number} openedMenuItem - ID of the opened menu item\n  \n  */\nhandleMenuItemClick(openedMenuItem){\n  this.props.toggleDrawer()\n  this.setState({openedMenuItem})\n}\n\n  /**\n    * Display Booking Manager\n    * @return {JSX} Return Booking Manager\n    */\n  render() {\n    const {user: {name}} = this.props\n    const {\n      bands, concerts, upcomingEvents, previousEvents, scenes, technicians\n    } = this.state\n\n    const events = upcomingEvents && previousEvents && Object.assign({}, upcomingEvents, previousEvents)\n\n    const upcomingScenes = {}\n    Object.keys(scenes).forEach(sceneKey => {\n      Object.keys(upcomingEvents).forEach(upcomingEventKey => {\n        if (upcomingEvents[upcomingEventKey].scenes.includes(sceneKey)) {\n          upcomingScenes[sceneKey] = scenes[sceneKey]\n        }\n      })\n    })\n    return (\n        <div className=\"booking-manager role\">\n          <NewBooking\n            events={upcomingEvents}\n            scenes={upcomingScenes}\n            {...{bands, technicians}}\n          />\n          <Search {...{bands, concerts, name, scenes, events}}/>\n        </div>\n    )}\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/BookingManager/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "class",
    "name": "BookingManager",
    "memberof": "src/components/BookingManager/index.js",
    "static": true,
    "longname": "src/components/BookingManager/index.js~BookingManager",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/BookingManager/index.js",
    "importStyle": "BookingManager",
    "description": "This is the BookingManager Component",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 145,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/BookingManager/index.js~BookingManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingManager/index.js~BookingManager#constructor",
    "access": "public",
    "description": "BookingManager constructor",
    "lineNumber": 17
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/BookingManager/index.js~BookingManager",
    "static": false,
    "longname": "src/components/BookingManager/index.js~BookingManager#state",
    "access": "public",
    "description": "Contain data that may change over time",
    "lineNumber": 32,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.events",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.scenes",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.concerts",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.technicians",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.bands",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "state.bandKeys",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state.openedMenuItem",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/components/BookingManager/index.js~BookingManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingManager/index.js~BookingManager#componentDidMount",
    "access": "public",
    "description": "Fetch and Validate Data",
    "lineNumber": 47,
    "params": [],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "handleMenuItemClick",
    "memberof": "src/components/BookingManager/index.js~BookingManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingManager/index.js~BookingManager#handleMenuItemClick",
    "access": "public",
    "description": "",
    "lineNumber": 112,
    "deprecated": "Change page to display after item in left menui is clicked",
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "openedMenuItem",
        "description": "ID of the opened menu item"
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/BookingManager/index.js~BookingManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/BookingManager/index.js~BookingManager#render",
    "access": "public",
    "description": "Display Booking Manager",
    "lineNumber": 121,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return Booking Manager"
    },
    "params": []
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "src/components/Login/index.jsx",
    "content": "import React, {Component} from 'react'\nimport concert from '../../img/concert.jpg'\nimport firebase from 'firebase'\nimport Menu from 'material-ui/Menu'\nimport MenuItem from 'material-ui/MenuItem'\n\nimport {Icon} from '../../utils'\n\n\n/**\n  * Login component\n  */\nexport default class Login extends Component {\n\n  /**\n  * Log the user in\n  * @param {String} email - The user's email address\n\n  */\n  login = email => {\n    firebase.auth().signInWithEmailAndPassword(email, \"123456\")\n      .catch(error => console.log(error))\n  }\n\n  /**\n    * Display a login form\n    * @return {JSX} Return a login form\n    */\n  render() {\n    return (\n      <div id=\"login\">\n        <div className=\"demo-card-wide mdl-card mdl-shadow--2dp\">\n          <div className=\"mdl-card__title\">\n            <h2 className=\"mdl-card__title-text\">Please log in</h2>\n          </div>\n          <form action=\"\">\n            <Menu>\n              <MenuItem onClick={() => this.login(\"joe@org.com\")} primaryText=\"joe@org.com\"/>\n              <MenuItem onClick={() => this.login(\"jane@boob.com\")} primaryText=\"jane@boob.com\"/>\n              <MenuItem onClick={() => this.login(\"jessica@boom.com\")} primaryText=\"jessica@boom.com\"/>\n              <MenuItem onClick={() => this.login(\"james@man.com\")} primaryText=\"james@man.com\"/>\n              <MenuItem onClick={() => this.login(\"jack@tech.com\")} primaryText=\"jack@tech.com\"/>\n              <MenuItem onClick={() => this.login(\"jamie@ser.com\")} primaryText=\"jamie@ser.com\"/>\n              <MenuItem onClick={() => this.login(\"frank@pro.com\")} primaryText=\"frank@pro.com\"/>\n            </Menu>\n          </form>\n          <div className=\"mdl-card__menu\">\n            <Icon name=\"lock\"/>\n          </div>\n        </div>\n        <img className=\"background-img\" src={concert} alt=\"\"/>\n      </div>\n    )\n  }\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/Login/index.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "class",
    "name": "Login",
    "memberof": "src/components/Login/index.jsx",
    "static": true,
    "longname": "src/components/Login/index.jsx~Login",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/Login/index.jsx",
    "importStyle": "Login",
    "description": "Login component",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "login",
    "memberof": "src/components/Login/index.jsx~Login",
    "static": false,
    "longname": "src/components/Login/index.jsx~Login#login",
    "access": "public",
    "description": "Log the user in",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "The user's email address"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/Login/index.jsx~Login",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Login/index.jsx~Login#render",
    "access": "public",
    "description": "Display a login form",
    "lineNumber": 29,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return a login form"
    },
    "params": []
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "src/components/Manager/index.js",
    "content": "import React, { Component } from 'react'\nimport firebase from 'firebase'\nimport Band from '../Band'\nimport {Loading} from '../../utils'\nimport Masonry from 'react-masonry-css'\n\n/**\n* This is the Manager Component\n*/\n\nexport default class Manager extends Component {\n\n  /**\n  * Manager constructor\n  */\n\n  constructor(){\n    super()\n\n    /**\n    * Contain data that may change over time\n    * @type {Object} state\n    * @property {Object} state.bands\n    * @property {String} state.openedMenuItem\n    * @property {Object} state.concerts\n    */\n\n    this.state = {\n      bands: {},\n      openedMenuItem: \"bandview\",\n      concerts: {}\n    }\n  }\n\n/**\n* Fetch and Validate data\n*/\n\n  componentDidMount(){\n    const db = firebase.database().ref()\n    const bandsRef = db.child('bands')\n    const staffRef = db.child('staff')\n    const concertsRef = db.child('concerts')\n    const profilesRef = db.child('staff/profiles')\n\n    concertsRef.on('value', snap => {\n      const concerts = snap.val()\n      Object.keys(concerts).forEach(key => {\n        const concert = concerts[key]\n        const {technicians} = concert\n        const technician = Object.keys(technicians)[0]\n        profilesRef.child(`${technician}/img`).on('value', snap => {\n          concerts[key].contact = `${snap.val()}@tech.com`\n        })\n      })\n      this.setState({concerts})\n    })\n    bandsRef.on('value', snap => {\n      let bands = snap.val()\n      Object.keys(bands).forEach(bandKey => {\n        if (bands[bandKey]['manager'] !== this.props.user['uid']){\n          delete(bands[bandKey])\n        }\n        else{\n          let memberNames = []\n          const members = bands[bandKey].members\n          staffRef.child('profiles').on('value', snap => {\n            const profiles = snap.val()\n            Object.keys(profiles).forEach(profileKey => {\n              if (members.includes(profileKey)){\n                memberNames.push(profiles[profileKey].name)\n              }\n            })\n            bands[bandKey].members = memberNames\n            this.setState({bands})\n          })\n        }\n      })\n    })\n  }\n\n  /**\n    * Display Manager\n    * @return {JSX} Return Manager\n    */\n  render() {\n    const {bands, concerts} = this.state\n    return (\n      <div className=\"manager role\">\n\n        <Masonry\n          breakpointCols={{\n              default: 3,\n              1440: 2,\n              1024: 1\n          }}\n          style={{\n              margin: \"0 auto\",\n              paddingLeft: 20,\n              display: \"flex\",\n              width: \"100vw\"\n          }}\n          columnClassName=\"band-list-column\"\n        >\n          {Object.keys(bands).length !== 0 ?\n            Object.keys(bands).map(bandKey => {\n              const {name, genre} = bands[bandKey]\n              return (\n                <Band\n                  headerType={'big'}\n                  title={name}\n                  subtitle={genre}\n                  showAlbumSales showGenre showMonthlyListeners\n                  showBandMembers\n                  showRequirements canEditRequirements\n                  showReviews\n                  showFutureConcerts\n                  key={bandKey}\n                  band={bands[bandKey]}\n                  {...{bandKey, concerts}}\n                />\n              )\n            }) :\n            <Loading/>\n          }\n        </Masonry>\n      </div>\n    )\n  }\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/Manager/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "class",
    "name": "Manager",
    "memberof": "src/components/Manager/index.js",
    "static": true,
    "longname": "src/components/Manager/index.js~Manager",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/Manager/index.js",
    "importStyle": "Manager",
    "description": "This is the Manager Component",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 156,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/Manager/index.js~Manager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Manager/index.js~Manager#constructor",
    "access": "public",
    "description": "Manager constructor",
    "lineNumber": 17
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/Manager/index.js~Manager",
    "static": false,
    "longname": "src/components/Manager/index.js~Manager#state",
    "access": "public",
    "description": "Contain data that may change over time",
    "lineNumber": 28,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.bands",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state.openedMenuItem",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.concerts",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/components/Manager/index.js~Manager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Manager/index.js~Manager#componentDidMount",
    "access": "public",
    "description": "Fetch and Validate data",
    "lineNumber": 39,
    "params": [],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/Manager/index.js~Manager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Manager/index.js~Manager#render",
    "access": "public",
    "description": "Display Manager",
    "lineNumber": 86,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return Manager"
    },
    "params": []
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "src/components/Organizer/EventInfo.jsx",
    "content": "import React from 'react'\nimport Avatar from 'material-ui/Avatar'\nimport {List, ListItem} from 'material-ui/List'\nimport Paper from 'material-ui/Paper'\nimport {capitalize, parseDate, Icon, InfoSnippet} from '../../utils'\n\n\n/**\n  * Get profile picture dynamically\n  */\nconst profiles = require.context('../../img/profiles')\n\n/**\n  * Display information about the event\n  * @param {Object} props\n  * @param {Object} props.event\n  * @param {Date} props.event.from - Event's start date\n  * @param {Date} props.event.to - Event's end date\n  * @param {String} props.event.location - Event's location\n  * @param {String} props.event.name - Event's name\n  * @return {JSX} Return information about the event\n  */\nconst EventInfo = ({staff, event: {from, to, location, name}}) => {\n  return (\n    <div>\n      <h4><Icon title=\"Event info\" name=\"info\" color=\"grey\"/></h4>\n      <Paper  className=\"event-info\">\n        <h2>{name}</h2>\n        <List>\n          <InfoSnippet icon=\"event\" subText=\"Dates\">{`${parseDate(from)} - ${parseDate(to)}`}</InfoSnippet>\n          <InfoSnippet icon=\"map\" subText=\"Location\">{location}</InfoSnippet>\n          <InfoSnippet icon=\"people\" orientation=\"portrait\" disableTitle disableHover alignSubText=\"center\" subText=\"Staff members\">\n            <StaffList {...{staff}}/>\n          </InfoSnippet>\n        </List>\n      </Paper>\n    </div>\n  )\n}\n\nexport default EventInfo\n\n\n/**\n  * Display list of staff\n  * @param {Object} props\n  * @param {Object} props.staff - list of staff\n  * @return {JSX} Return list of staff\n  */\nconst StaffList = ({staff}) => {\n  let staffList = []\n  let techniciansList = []\n  Object.keys(staff).forEach(role =>  {\n    const staffMembers = staff[role]\n    staffMembers.forEach(staffMember => {\n      const {name, img, role} = staffMember\n      if (role !== \"technician\") {\n        staffList.push (\n          <ListItem key={name}\n            leftAvatar={<Avatar src={profiles(`./${img}.jpg`)} />}\n            primaryText={name}\n            secondaryText={capitalize(role)}\n          />\n        )\n      } else {\n        techniciansList.push (\n          <ListItem\n            key={name}\n            leftAvatar={<Avatar src={profiles(`./${img}.jpg`)} />}\n            primaryText={name}\n            secondaryText={capitalize(role)}\n          />\n        )\n      }\n    })\n  })\n  return (\n    <div>\n      {/* <h5><Icon title=\"Staff members\" name=\"people\"/></h5> */}\n      <List className=\"staff-list\">\n        {staffList}\n      </List>\n      <List className=\"staff-list\">\n        {techniciansList}\n      </List>\n    </div>)\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/Organizer/EventInfo.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "profiles",
    "memberof": "src/components/Organizer/EventInfo.jsx",
    "static": true,
    "longname": "src/components/Organizer/EventInfo.jsx~profiles",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/Organizer/EventInfo.jsx",
    "importStyle": null,
    "description": "Get profile picture dynamically",
    "lineNumber": 11,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "StaffList",
    "memberof": "src/components/Organizer/EventInfo.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Organizer/EventInfo.jsx~StaffList",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/Organizer/EventInfo.jsx",
    "importStyle": null,
    "description": "Display list of staff",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.staff",
        "description": "list of staff"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return list of staff"
    },
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "EventInfo",
    "memberof": "src/components/Organizer/EventInfo.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Organizer/EventInfo.jsx~EventInfo",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/Organizer/EventInfo.jsx",
    "importStyle": "EventInfo",
    "description": "Display information about the event",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.event",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "props.event.from",
        "description": "Event's start date"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "props.event.to",
        "description": "Event's end date"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.event.location",
        "description": "Event's location"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.event.name",
        "description": "Event's name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return information about the event"
    }
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "src/components/Organizer/Scenes.jsx",
    "content": "import React from 'react'\nimport Paper from 'material-ui/Paper'\nimport { Table, TableBody, TableHeader,\n  TableHeaderColumn, TableRow,\n  TableRowColumn\n} from 'material-ui/Table'\n\nimport {parseDate, parseTime, Icon} from '../../utils'\n\n/**\n  * Display a scene\n  * @param {Object} props\n  * @param {Object} props.name - Name of the scene\n  * @param {Array} props.bands - List of bands on the scene\n  * @param {Date} props.eventStart - Event's start date\n  * @return {JSX} Return a scene\n  */\nconst Scene = ({name, bands, eventStart}) => (\n    <li className=\"scene\">\n      <Paper>\n        <h6>Scene {name}</h6>\n        <Table className=\"band-list\">\n          <TableHeader adjustForCheckbox={false} displaySelectAll={false}>\n            <TableRow>\n              <TableHeaderColumn>Band name</TableHeaderColumn>\n              <TableHeaderColumn>Start time/day</TableHeaderColumn>\n              <TableHeaderColumn>End time/day</TableHeaderColumn>\n              <TableHeaderColumn>Technician(attending)</TableHeaderColumn>\n            </TableRow>\n          </TableHeader>\n          <TableBody\n            showRowHover\n            displayRowCheckbox={false}\n          >\n            {bands.map(band => {\n              const {name, from, to, technicians} = band\n              const startDay = 1 + new Date(from).getDate() - new Date(eventStart).getDate()\n              const endDay = 1 +  new Date(to).getDate() - new Date(eventStart).getDate()\n              const technician = technicians ? Object.keys(technicians).map(key => {\n\n                if (technicians[key].isAttending) {\n                  return technicians[key].name\n                } else {\n                  return null\n                }\n              })[0] : null\n              return (\n                <TableRow key={name} className=\"band\">\n                  <TableRowColumn>\n                    <p>{name}</p>\n                  </TableRowColumn>\n                  <TableRowColumn>\n                    <p title={parseDate(from)}>{`${parseTime(from)}/${startDay}`}</p>\n                  </TableRowColumn>\n                  <TableRowColumn>\n                    <p title={parseDate(to)}>{`${parseTime(to)}/${endDay}`}</p>\n                  </TableRowColumn>\n                  <TableRowColumn>\n                    <p style={{color: technician ? \"\" : \"red\"}}>{technician ? technician : \"Nobody\"}</p>\n                  </TableRowColumn>\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n      </Paper>\n    </li>\n)\n\n/**\n  * Display list of scenes\n  * @param {Object} props\n  * @param {Object} props.scenes - list of scenes\n  * @param {Date} props.eventStart - Event's start date\n  * @return {JSX} Return list of scenes\n  */\nconst ScenesList = ({scenes, eventStart}) => (\n  <div>\n    <h4><Icon title=\"Scenes\" name=\"account_balance\" color=\"grey\"/></h4>\n    <ul className=\"scenes-list\">\n      {Object.keys(scenes).map(key => {\n        const scene = scenes[key]\n        const {name, bands} = scene\n        return <Scene key={name} {...{name, bands, eventStart}}/>\n      })}\n    </ul>\n  </div>\n)\n\nexport default ScenesList\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/Organizer/Scenes.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "Scene",
    "memberof": "src/components/Organizer/Scenes.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Organizer/Scenes.jsx~Scene",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/Organizer/Scenes.jsx",
    "importStyle": null,
    "description": "Display a scene",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.name",
        "description": "Name of the scene"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "props.bands",
        "description": "List of bands on the scene"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "props.eventStart",
        "description": "Event's start date"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return a scene"
    },
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "ScenesList",
    "memberof": "src/components/Organizer/Scenes.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Organizer/Scenes.jsx~ScenesList",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/Organizer/Scenes.jsx",
    "importStyle": "ScenesList",
    "description": "Display list of scenes",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.scenes",
        "description": "list of scenes"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "props.eventStart",
        "description": "Event's start date"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return list of scenes"
    }
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "src/components/Organizer/index.js",
    "content": "import React, { Component } from 'react'\nimport firebase from 'firebase'\nimport MenuItem from 'material-ui/MenuItem'\nimport DropDownMenu from 'material-ui/DropDownMenu'\nimport {Toolbar, ToolbarGroup} from 'material-ui/Toolbar'\nimport {Loading} from '../../utils'\nimport EventInfo from './EventInfo'\nimport Scenes from './Scenes'\n\n/**\n* This is the Organizer Component\n*/\n\nexport default class Organizer extends Component {\n\n  /**\n  * Organizer constructor\n  */\n\n  constructor() {\n    super()\n\n    /**\n    * Contain data that may change over time\n    * @type {Object} state\n    * @property {Object} state.events\n    * @property {number} state.value\n    */\n\n    this.state = {\n      events: {},\n      value: 1\n    }\n  }\n\n/**\nFetch and Validate data\n*/\n\n  componentDidMount() {\n    const db = firebase.database().ref()\n    const eventsRef = db.child('events')\n    const scenesRef = db.child('scenes')\n    const concertsRef = db.child('concerts')\n    const bandsRef = db.child('bands')\n    const profilesRef = db.child('staff/profiles')\n\n    eventsRef.on('value', snap => {\n      const events = snap.val()\n      Object.keys(events).forEach(eventKey => {\n        const event = events[eventKey]\n        if (event.staff.organizer.includes(this.props.user.uid)) {\n            // Fetch event staff information\n          const {staff} = event\n          Object.keys(staff).forEach(roleKey => {\n            const roleMembers = staff[roleKey]\n            staff[roleKey] = []\n            roleMembers.forEach(roleMember => {\n              profilesRef.child(`${roleMember}`).on('value', snap => {\n                staff[roleKey].push(snap.val())\n              })\n            })\n          })\n\n          // Fetch scenes information\n          const {scenes} = event\n          event.scenes = {}\n          scenes.forEach(sceneKey => {\n            scenesRef.child(sceneKey).on('value', snap => {\n              const scene = snap.val()\n              event.scenes[sceneKey] = scene\n              const {concerts} = scene\n              concerts.forEach(concertKey => {\n                delete event.scenes[sceneKey].concerts\n                scene.bands = []\n                concertsRef.child(concertKey).on('value', snap => {\n                  let {band, from, to, technicians} = snap.val()\n                  Object.keys(technicians).forEach(technicianKey => {\n                    profilesRef.child(technicianKey).on('value', snap => {\n                      technicians[technicianKey].name = snap.val().name\n                    })\n                  })\n                  bandsRef.child(`${band}/name`).on('value', snap => {\n                    scene.bands.push({\n                      name: snap.val(), from, to,\n                      technicians: {\n                        ...technicians\n                      }})\n                    this.setState({events, value: Object.keys(events)[0]})\n                  })\n                })\n              })\n            })\n          })\n        } else {\n          delete events[eventKey]\n        }\n      })\n    })\n  }\n\n  /**\n    * Handle click of event dropdown\n    * @param {Object} Clicked element\n    * @param {number} Clicked Event's index\n    * @param {String} Clicked Event's ID\n    */\n\n  handleChange = (event, index, value) => this.setState({value})\n\n  /**\n    * Display Organizer\n    * @return {JSX} Return Organizer\n    */\n  render() {\n    const {events, value} = this.state\n    return (\n        <div className=\"organizer role\">\n          <Toolbar>\n            <ToolbarGroup>\n              <DropDownMenu value={value} onChange={this.handleChange}>\n                {Object.keys(events).map(key => (\n                  <MenuItem\n                    key={key}\n                    value={key}\n                    primaryText={events[key].name}\n                  />))\n                }\n              </DropDownMenu>\n            </ToolbarGroup>\n          </Toolbar>\n          {\n            events[value] ? <EventView event={events[value]}/> : <Loading/>\n          }\n        </div>\n    )\n  }\n}\n\n\n/**\n  * Display an event\n  * @param {Object} props\n  * @param {Object} props.event - Event\n  * @return {JSX} Return an event\n  */\nconst EventView = ({event}) =>  {\n  const {scenes, staff, from} = event\n  return (\n    <div className=\"event\">\n      <EventInfo event={event} staff={staff}/>\n      <Scenes eventStart={from} scenes={scenes}/>\n    </div>\n  )\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/Organizer/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "Organizer",
    "memberof": "src/components/Organizer/index.js",
    "static": true,
    "longname": "src/components/Organizer/index.js~Organizer",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/Organizer/index.js",
    "importStyle": "Organizer",
    "description": "This is the Organizer Component",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 169,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/Organizer/index.js~Organizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Organizer/index.js~Organizer#constructor",
    "access": "public",
    "description": "Organizer constructor",
    "lineNumber": 20
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/Organizer/index.js~Organizer",
    "static": false,
    "longname": "src/components/Organizer/index.js~Organizer#state",
    "access": "public",
    "description": "Contain data that may change over time",
    "lineNumber": 30,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.events",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "state.value",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/components/Organizer/index.js~Organizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Organizer/index.js~Organizer#componentDidMount",
    "access": "public",
    "description": "Fetch and Validate data",
    "lineNumber": 40,
    "params": [],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "handleChange",
    "memberof": "src/components/Organizer/index.js~Organizer",
    "static": false,
    "longname": "src/components/Organizer/index.js~Organizer#handleChange",
    "access": "public",
    "description": "Handle click of event dropdown",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "Clicked",
        "description": "element"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "Clicked",
        "description": "Event's index"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "Clicked",
        "description": "Event's ID"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/Organizer/index.js~Organizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Organizer/index.js~Organizer#render",
    "access": "public",
    "description": "Display Organizer",
    "lineNumber": 115,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return Organizer"
    },
    "params": []
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "EventView",
    "memberof": "src/components/Organizer/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Organizer/index.js~EventView",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/Organizer/index.js",
    "importStyle": null,
    "description": "Display an event",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.event",
        "description": "Event"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return an event"
    },
    "ignore": true
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "src/components/PROrganizer/Scenes.jsx",
    "content": "import React from 'react'\nimport Band from '../Band'\n\nimport {parseDate, parseTime, parseNumber, Icon} from '../../utils'\n\n\n/**\n  * Display a scene\n  * @param {Object} props\n  * @param {Object} props.name - Name of the scene\n  * @param {Array} props.bands - List of bands on the scene\n  * @param {Date} props.eventStart - Event's start date\n  * @return {JSX} Return a scene\n  */\nconst Scene = ({name, bands, eventStart}) => (\n    <div className=\"scene\">\n      <h6>Scene {name}</h6>\n      <div className=\"band-list\">\n        {bands.map(band => {\n          const {name, from, to, size, participants} = band\n          const startDay = 1 + new Date(from).getDate() - new Date(eventStart).getDate()\n          const endDay = 1 +  new Date(to).getDate() - new Date(eventStart).getDate()\n          return (\n            <Band\n              key={name}\n              {...{band}}\n              headerType={'compact'}\n              title={name}\n              showManager\n              subtitle={\n                <div>\n                  <p>Tickets sold/Available seats: {parseNumber(participants)}/{parseNumber(size)}</p>\n                  <p>Start date: {`${parseDate(from)}`}</p>\n                  <p>Start time/day: {`${parseTime(from)}/${startDay}`}</p>\n                  <p>End time/day: {`${parseTime(to)}/${endDay}`}</p>\n                </div>\n              }\n              showReviews\n            />\n          )\n        })}\n      </div>\n    </div>\n)\n\n/**\n  * Display list of scenes\n  * @param {Object} props\n  * @param {Object} props.scenes - list of scenes\n  * @param {Date} props.eventStart - Event's start date\n  * @return {JSX} Return list of scenes\n  */\nconst ScenesList = ({scenes, eventStart}) => (\n  <div>\n    <h4><Icon title=\"Scenes\" name=\"account_balance\" color=\"grey\"/></h4>\n    <div>\n      {Object.keys(scenes).map(key => {\n        const scene = scenes[key]\n        const {name, bands} = scene\n        return <Scene key={name} {...{name, bands, eventStart}}/>\n      })}\n    </div>\n  </div>\n)\n\nexport default ScenesList\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/PROrganizer/Scenes.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "Scene",
    "memberof": "src/components/PROrganizer/Scenes.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/PROrganizer/Scenes.jsx~Scene",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/PROrganizer/Scenes.jsx",
    "importStyle": null,
    "description": "Display a scene",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.name",
        "description": "Name of the scene"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "props.bands",
        "description": "List of bands on the scene"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "props.eventStart",
        "description": "Event's start date"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return a scene"
    },
    "ignore": true
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "ScenesList",
    "memberof": "src/components/PROrganizer/Scenes.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/PROrganizer/Scenes.jsx~ScenesList",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/PROrganizer/Scenes.jsx",
    "importStyle": "ScenesList",
    "description": "Display list of scenes",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.scenes",
        "description": "list of scenes"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "props.eventStart",
        "description": "Event's start date"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return list of scenes"
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/components/PROrganizer/index.js",
    "content": "import React, { Component } from 'react'\nimport firebase from 'firebase'\nimport MenuItem from 'material-ui/MenuItem'\nimport DropDownMenu from 'material-ui/DropDownMenu'\nimport {Toolbar, ToolbarGroup} from 'material-ui/Toolbar'\nimport {Loading} from '../../utils'\nimport EventInfo from '../Organizer/EventInfo'\nimport Scenes from './Scenes'\n\n/**\n* This is the PROrganizer Component\n*/\n\nexport default class PROrganizer extends Component {\n\n  /**\n  * PROrganizer constructor\n  */\n\n  constructor() {\n    super()\n\n    /**\n    * Contain data that may change over time\n    * @type {Object} state\n    * @property {Object} state.events\n    * @property {number} state.value\n    */\n\n    this.state = {\n      events: {},\n      value: 1\n    }\n  }\n\n  /**\n  * Fetch and Validate data\n  */\n\n  componentDidMount() {\n    const db = firebase.database().ref()\n    const eventsRef = db.child('events')\n    const scenesRef = db.child('scenes')\n    const concertsRef = db.child('concerts')\n    const bandsRef = db.child('bands')\n    const staffRef = db.child('staff/profiles')\n    eventsRef.on('value', snap => {\n      const events = snap.val()\n      Object.keys(events).forEach(eventKey => {\n        const event = events[eventKey]\n        if (event.staff.PROrganizer.includes(this.props.user.uid)) {\n            // Fetch event staff information\n          const {staff} = event\n          Object.keys(staff).forEach(roleKey => {\n            const roleMembers = staff[roleKey]\n            staff[roleKey] = []\n            roleMembers.forEach(roleMember => {\n              staffRef.child(`${roleMember}`).on('value', snap => {\n                staff[roleKey].push(snap.val())\n              })\n            })\n          })\n\n          // Fetch scenes information\n          const {scenes} = event\n          event.scenes = {}\n          scenes.forEach(sceneKey => {\n            scenesRef.child(sceneKey).on('value', snap => {\n              const scene = snap.val()\n              event.scenes[sceneKey] = scene\n              const {concerts, size} = scene\n              concerts.forEach(concertKey => {\n                delete event.scenes[sceneKey].concerts\n                scene.bands = []\n                concertsRef.child(`${concertKey}`).on('value', snap => {\n                  const {band, from, to, participants} = snap.val()\n                  bandsRef.child(`${band}`).on('value', snap => {\n                    scene.bands.push({size, participants, from, to,...snap.val()})\n                    this.setState({events, value: Object.keys(events)[0]})\n                  })\n                })\n              })\n            })\n          })\n        } else {\n          delete events[eventKey]\n        }\n      })\n    })\n  }\n\n\n  /**\n    * Handle click of event dropdown\n    * @param {Object} Clicked element\n    * @param {number} Clicked Event's index\n    * @param {String} Clicked Event's ID\n    */\n  handleChange = (event, index, value) => this.setState({value})\n\n\n  /**\n    * Display PR Organizer\n    * @return {JSX} Return PR Organizer\n    */\n  render() {\n    const {events, value} = this.state\n    return (\n        <div className=\"organizer role\">\n          <Toolbar>\n            <ToolbarGroup>\n              <DropDownMenu value={value} onChange={this.handleChange}>\n                {Object.keys(events).map(key => (\n                  <MenuItem\n                    key={key}\n                    value={key}\n                    primaryText={events[key].name}\n                  />))\n                }\n              </DropDownMenu>\n            </ToolbarGroup>\n          </Toolbar>\n          {\n            events[value] ? <EventView event={events[value]}/> : <Loading/>\n          }\n        </div>\n    )\n  }\n}\n\n\n\n/**\n  * Display an event\n  * @param {Object} props\n  * @param {Object} props.event - Event\n  * @return {JSX} Return an event\n  */\nconst EventView = ({event}) =>  {\n  const {scenes, staff, from} = event\n  return (\n    <div className=\"event\">\n      <EventInfo event={event} staff={staff}/>\n      <Scenes eventStart={from} scenes={scenes}/>\n    </div>\n  )\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/PROrganizer/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "class",
    "name": "PROrganizer",
    "memberof": "src/components/PROrganizer/index.js",
    "static": true,
    "longname": "src/components/PROrganizer/index.js~PROrganizer",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/PROrganizer/index.js",
    "importStyle": "PROrganizer",
    "description": "This is the PROrganizer Component",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 180,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/PROrganizer/index.js~PROrganizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/PROrganizer/index.js~PROrganizer#constructor",
    "access": "public",
    "description": "PROrganizer constructor",
    "lineNumber": 20
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/PROrganizer/index.js~PROrganizer",
    "static": false,
    "longname": "src/components/PROrganizer/index.js~PROrganizer#state",
    "access": "public",
    "description": "Contain data that may change over time",
    "lineNumber": 30,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.events",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "state.value",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/components/PROrganizer/index.js~PROrganizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/PROrganizer/index.js~PROrganizer#componentDidMount",
    "access": "public",
    "description": "Fetch and Validate data",
    "lineNumber": 40,
    "params": [],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "handleChange",
    "memberof": "src/components/PROrganizer/index.js~PROrganizer",
    "static": false,
    "longname": "src/components/PROrganizer/index.js~PROrganizer#handleChange",
    "access": "public",
    "description": "Handle click of event dropdown",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "Clicked",
        "description": "element"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "Clicked",
        "description": "Event's index"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "Clicked",
        "description": "Event's ID"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/PROrganizer/index.js~PROrganizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/PROrganizer/index.js~PROrganizer#render",
    "access": "public",
    "description": "Display PR Organizer",
    "lineNumber": 106,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return PR Organizer"
    },
    "params": []
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "EventView",
    "memberof": "src/components/PROrganizer/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/PROrganizer/index.js~EventView",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/PROrganizer/index.js",
    "importStyle": null,
    "description": "Display an event",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.event",
        "description": "Event"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return an event"
    },
    "ignore": true
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/components/ServiceManager/Scenes.jsx",
    "content": "import React from 'react'\nimport Band from '../Band'\n\nimport {parseDate, parseTime, parseNumber, Icon} from '../../utils'\n\n/**\n* Return a scene with information about band and concert start / end\n* @param {Object} props\n* @param {String} props.name - name\n* @param {Object} props.bands - bands containing band and concert information\n* @return {JSX} Return a scene with information \n*/\n\nconst Scene = ({name, bands}) => (\n    <div className='scene'>\n      <h6>Scene {name}</h6>\n      <div className=\"band-list\">\n        {bands && bands.map(band => {\n          const {name, from, to, participants, genre} = band\n          return (\n            <Band\n              key={name}\n              {...{band}}\n              headerType={'compact'}\n              title={name}\n              subtitle={\n                <div>\n                <p>Tickets sold: {parseNumber(participants)}</p>\n                <p>Start date: {`${parseDate(from)}`}</p>\n                <p>Start time: {`${parseTime(from)}`}</p>\n                <p>End time: {`${parseTime(to)}`}</p>\n                <p>Genre: {genre}</p>\n              </div>\n            }\n          />\n        )\n      })}\n      </div>\n    </div>\n)\n\n/**\n* Display a scene containing concerts\n* @param {Object} props\n* @param {Object} scenes - scenes containing information\n* @param {number} eventStart\n* @return {JSX} Return a scene containing concerts with information\n*/\n\nconst Scenes = ({scenes, eventStart}) => (\n  <div>\n    <h5><Icon title=\"Scenes\" name=\"account_balance\" color=\"grey\"/></h5>\n    <div>\n      {Object.keys(scenes).map(key => {\n        const scene = scenes[key]\n        const {name, bands} = scene\n        return <Scene key={name} {...{name, bands, eventStart}}/>\n      })}\n    </div>\n  </div>\n)\n\nexport default Scenes\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/ServiceManager/Scenes.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "Scene",
    "memberof": "src/components/ServiceManager/Scenes.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ServiceManager/Scenes.jsx~Scene",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/ServiceManager/Scenes.jsx",
    "importStyle": null,
    "description": "Return a scene with information about band and concert start / end",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.name",
        "description": "name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.bands",
        "description": "bands containing band and concert information"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return a scene with information"
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "Scenes",
    "memberof": "src/components/ServiceManager/Scenes.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ServiceManager/Scenes.jsx~Scenes",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/ServiceManager/Scenes.jsx",
    "importStyle": "Scenes",
    "description": "Display a scene containing concerts",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "scenes",
        "description": "scenes containing information"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "eventStart",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return a scene containing concerts with information"
    }
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/components/ServiceManager/index.js",
    "content": "import React, { Component } from 'react'\nimport firebase from 'firebase'\nimport Scenes from './Scenes'\nimport {Loading} from '../../utils'\n\n\n/**\n* This is the Service Manager Component\n*/\n\nexport default class ServiceManager extends Component {\n\n  /**\n  * ServiceManager constructor\n  */\n  constructor() {\n    super()\n\n    /**\n    * Contain data that may change over time\n    * @type {Object} state\n    * @property {Object} state.events - contains events from database\n    * @property {Object} state.concerts - contains concerts from database\n    * @property {Object} state.scenes - contains scenes from database\n    * @property {Object} state.bands - contains bands from database\n    */\n\n    this.state = {\n      events: {},\n      concerts: {},\n      scenes: {},\n      bands: {}\n    }\n  }\n\n  /**\n  * Fetch and validate data\n\n  */\n\n  componentDidMount() {\n    const db = firebase.database().ref()\n    const concertsRef = db.child('concerts')\n    const eventsRef = db.child('events')\n    const scenesRef = db.child('scenes')\n    const bandsRef = db.child('bands')\n\n    eventsRef.on('value', snap => {\n      const events = snap.val()\n      Object.keys(events).forEach(eventKey => {\n        const event = events[eventKey]\n        if (event.staff.serviceManager.includes(this.props.user.uid)){\n          this.setState(({events}) => ({\n            events: {\n              ...events,\n              [eventKey]: event\n            }\n          }))\n          const {scenes} = event\n          event.scenes = {}\n          scenes.forEach(sceneKey => {\n            scenesRef.child(sceneKey).on('value', snap => {\n              const scene = snap.val()\n              event.scenes[sceneKey] = scene\n              const {concerts} = scene\n              concerts.forEach(concertKey => {\n                delete event.scenes[sceneKey].concerts\n                scene.bands = []\n                concertsRef.child(`${concertKey}`).on('value', snap => {\n                  const {band, from, to, participants} = snap.val()\n                  bandsRef.child(`${band}`).on('value', snap => {\n                    scene.bands.push({ from, to, participants, ...snap.val()})\n                    this.setState({events, value: Object.keys(events)[0]} )\n                  })\n                })\n              })\n            })\n          })\n        } else {\n          delete events[eventKey]\n        }\n      })\n    })\n  }\n\n  /**\n  *\n  * @return {JSX} return Scenes\n  */\n\n  /**\n    * Display Service Manager\n    * @return {JSX} Return Service Manager\n    */\n  render() {\n    const {events, value} = this.state\n    return(\n      <div className=\"ServiceManager role\">\n        {\n          events[value] ? <SceneView event={events[value]}/> : <Loading/>\n        }\n      </div>\n    )\n  }\n}\n\n/**\n* Connect Scenes to the main ServiceManager component\n* @param {Object} props\n* @param {Object} props.event - event information\n* @return {JSX} Div containing Scenes from Scenes.jsx\n*/\n\nconst SceneView = ({event}) =>  {\n  const {scenes, from} = event\n  return (\n    <div className=\"scenes\">\n      <Scenes eventStart={from} scenes={scenes}/>\n    </div>\n  )\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/ServiceManager/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "class",
    "name": "ServiceManager",
    "memberof": "src/components/ServiceManager/index.js",
    "static": true,
    "longname": "src/components/ServiceManager/index.js~ServiceManager",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/ServiceManager/index.js",
    "importStyle": "ServiceManager",
    "description": "This is the Service Manager Component",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 191,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/ServiceManager/index.js~ServiceManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/ServiceManager/index.js~ServiceManager#constructor",
    "access": "public",
    "description": "ServiceManager constructor",
    "lineNumber": 16
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/ServiceManager/index.js~ServiceManager",
    "static": false,
    "longname": "src/components/ServiceManager/index.js~ServiceManager#state",
    "access": "public",
    "description": "Contain data that may change over time",
    "lineNumber": 28,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.events",
        "description": "contains events from database"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.concerts",
        "description": "contains concerts from database"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.scenes",
        "description": "contains scenes from database"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.bands",
        "description": "contains bands from database"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/components/ServiceManager/index.js~ServiceManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/ServiceManager/index.js~ServiceManager#componentDidMount",
    "access": "public",
    "description": "Fetch and validate data",
    "lineNumber": 41,
    "params": [],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/ServiceManager/index.js~ServiceManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/ServiceManager/index.js~ServiceManager#render",
    "access": "public",
    "description": "Display Service Manager",
    "lineNumber": 95,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return Service Manager"
    },
    "params": []
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "SceneView",
    "memberof": "src/components/ServiceManager/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ServiceManager/index.js~SceneView",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/ServiceManager/index.js",
    "importStyle": null,
    "description": "Connect Scenes to the main ServiceManager component",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.event",
        "description": "event information"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Div containing Scenes from Scenes.jsx"
    },
    "ignore": true
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "src/components/Technician/Concerts.jsx",
    "content": "import React, { Component } from 'react'\nimport firebase from 'firebase'\nimport Paper from 'material-ui/Paper'\nimport RaisedButton from 'material-ui/RaisedButton';\nimport {List} from 'material-ui/List'\nimport {parseDate, parseTime, InfoSnippet} from '../../utils'\n\n\n/**\n  * Concert component\n  */\nclass Concert extends Component {\n\n  /**\n  * Concert constructor\n  */\n  constructor() {\n    super()\n\n    /**\n      * @type {Object} state\n      * @property {Boolean} state.isAttending - Whether there is an attending Technician on the concert or not\n      */\n    this.state = {\n      isAttending: false\n    }\n  }\n\n\n  /**\n  * Fetch isAttending state from database\n  */\n  componentDidMount() {\n    firebase.database().ref(`concerts/${this.props.concertKey}/technicians/${this.props.technicianId}/isAttending`).on('value', snap => this.setState({isAttending: snap.val()}))\n  }\n\n  /**\n  * Write isAttending state to database on click\n  */\n  handleClick = () => {\n    this.setState(({isAttending}) =>\n    ({isAttending: !isAttending}),\n    () => firebase.database()\n      .ref(`concerts/${this.props.concertKey}/technicians/${this.props.technicianId}/isAttending`)\n      .set(this.state.isAttending))\n  }\n\n  /**\n    * Display a concert\n    * @return {JSX} Return a concert\n    */\n  render() {\n    const {isAttending} = this.state\n    const {concert, concertKey} = this.props\n    const {from, to, location, bandName, sceneName} = concert\n    const technicalRequirements = concert.technicalRequirements.join(\", \")\n    return (\n      <li key={concertKey} className=\"concert-list-item\">\n        <Paper>\n          <h2>{bandName}</h2>\n          <List>\n            <InfoSnippet icon=\"date_range\" subText=\"Date\">{parseDate(from)}</InfoSnippet>\n            <InfoSnippet icon=\"access_time\" subText=\"Start/end\">{parseTime(from)} - {parseTime(to)}</InfoSnippet>\n            <InfoSnippet icon=\"settings_input_component\" subText=\"Technical requirements\">{technicalRequirements}</InfoSnippet>\n            <InfoSnippet icon=\"account_balance\" subText=\"Scene\">{sceneName}</InfoSnippet>\n            <InfoSnippet icon=\"place\" subText=\"Location\">{location}</InfoSnippet>\n            <div style={{display:\"flex\", justifyContent: \"space-between\"}}>\n              <RaisedButton disabled={isAttending} onClick={this.handleClick} label=\"Will attend\" primary />\n              <RaisedButton disabled={!isAttending} onClick={this.handleClick} label=\"Will not attend\" secondary />\n            </div>\n          </List>\n        </Paper>\n      </li>\n    )\n  }\n}\n\n\n/**\n  * Display list of concerts\n  * @param {Object} props\n  * @param {Object} props.concerts - List of concerts\n  * @param {String} props.technicianId - ID of the technician of the concert\n  * @return {JSX} Return list of concerts\n  */\nconst Concerts = ({concerts, technicianId}) => (\n  <div>\n    <ul className=\"concert-list\">\n      {Object.keys(concerts).map(concertKey => (\n        <Concert\n          key={concertKey}\n          concert={concerts[concertKey]}\n          {...{concertKey, technicianId}}\n        />\n      ))}\n    </ul>\n  </div>\n)\n\nexport default Concerts\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/Technician/Concerts.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "Concert",
    "memberof": "src/components/Technician/Concerts.jsx",
    "static": true,
    "longname": "src/components/Technician/Concerts.jsx~Concert",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/components/Technician/Concerts.jsx",
    "importStyle": null,
    "description": "Concert component",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "react~Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 198,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/Technician/Concerts.jsx~Concert",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Technician/Concerts.jsx~Concert#constructor",
    "access": "public",
    "description": "Concert constructor",
    "lineNumber": 17
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/Technician/Concerts.jsx~Concert",
    "static": false,
    "longname": "src/components/Technician/Concerts.jsx~Concert#state",
    "access": "public",
    "description": "",
    "lineNumber": 24,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "state.isAttending",
        "description": "Whether there is an attending Technician on the concert or not"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/components/Technician/Concerts.jsx~Concert",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Technician/Concerts.jsx~Concert#componentDidMount",
    "access": "public",
    "description": "Fetch isAttending state from database",
    "lineNumber": 33,
    "params": [],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "handleClick",
    "memberof": "src/components/Technician/Concerts.jsx~Concert",
    "static": false,
    "longname": "src/components/Technician/Concerts.jsx~Concert#handleClick",
    "access": "public",
    "description": "Write isAttending state to database on click",
    "lineNumber": 40,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/Technician/Concerts.jsx~Concert",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Technician/Concerts.jsx~Concert#render",
    "access": "public",
    "description": "Display a concert",
    "lineNumber": 52,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return a concert"
    },
    "params": []
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "Concerts",
    "memberof": "src/components/Technician/Concerts.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Technician/Concerts.jsx~Concerts",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/Technician/Concerts.jsx",
    "importStyle": "Concerts",
    "description": "Display list of concerts",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.concerts",
        "description": "List of concerts"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.technicianId",
        "description": "ID of the technician of the concert"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return list of concerts"
    }
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "src/components/Technician/index.js",
    "content": "import React, { Component } from 'react'\nimport firebase from 'firebase'\nimport Concerts from './Concerts'\nimport {NoResult} from '../../utils'\n\n/**\n* This is the Technician Component\n*/\n\nexport default class Technician extends Component {\n\n  /**\n  * Technician constructor\n  */\n\n  constructor() {\n    super()\n\n    /**\n    * Contain data that may change over time\n    * @type {Object} state\n    * @property {Object} state.concerts\n    * @property {Object} state.bands\n    * @property {Object} state.scenes\n    * @property {Object} state.events\n    * @property {String} state.openedMenuItem\n    */\n\n    this.state = {\n      concerts: null,\n      bands: null,\n      scenes: null,\n      events: null,\n      openedMenuItem: \"concertsOverview\"\n    }\n  }\n\n  /**\n  * Fetch and Validate data\n  */\n\n  componentDidMount() {\n\n    const db = firebase.database().ref()\n    const concertsRef = db.child('concerts')\n    const bandsRef = db.child('bands')\n    const eventsRef = db.child('events')\n    const scenesRef = db.child('scenes')\n\n    concertsRef.on('value', snap => {\n      const concerts = snap.val()\n      Object.keys(concerts).forEach(concertKey => {\n        const {technicians, isAcceptedByBookingBoss} = concerts[concertKey]\n        if (Object.keys(technicians).includes(this.props.user.uid) && isAcceptedByBookingBoss === true){\n          const concert = concerts[concertKey]\n          if (Date.now() <= concert.from) {\n            scenesRef.on('value', snap => {\n              const scenes = snap.val()\n              Object.keys(scenes).forEach(sceneKey => {\n                if (scenes[sceneKey].concerts.includes(concertKey)){\n                  const sceneName = scenes[sceneKey].name\n                  eventsRef.on('value', snap => {\n                    const events = snap.val()\n                    Object.keys(events).forEach(eventKey => {\n                      if (events[eventKey].scenes.includes(sceneKey)) {\n                        concert.location = events[eventKey].location\n                        bandsRef.child(concerts[concertKey].band).on('value', snap => {\n                          const {name, technicalRequirements} = snap.val()\n                          concert.sceneName = sceneName\n                          concert.bandName = name\n                          concert.technicalRequirements = technicalRequirements\n                          let concerts = this.state.concerts ? this.state.concerts : {}\n                          concerts[concertKey] = concert\n                          this.setState({concerts})\n                        })\n                      }\n                    })\n                  })\n                }\n              })\n            })\n          }\n        } else delete concerts[concertKey]\n      })\n    })\n  }\n\n  /**\n    * Display Technician\n    * @return {JSX} Return Technician\n    */\n  render(){\n    const {concerts} = this.state\n    const {name, uid: technicianId} = this.props.user\n    return (\n      <div className='technician role'>\n        {concerts ?\n          <Concerts {...{concerts, technicianId}}/> :\n          <NoResult text={`${name} has no upcoming concerts.`}/>\n        }\n      </div>\n    )\n  }\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/components/Technician/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "class",
    "name": "Technician",
    "memberof": "src/components/Technician/index.js",
    "static": true,
    "longname": "src/components/Technician/index.js~Technician",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/components/Technician/index.js",
    "importStyle": "Technician",
    "description": "This is the Technician Component",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 206,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/Technician/index.js~Technician",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Technician/index.js~Technician#constructor",
    "access": "public",
    "description": "Technician constructor",
    "lineNumber": 16
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/Technician/index.js~Technician",
    "static": false,
    "longname": "src/components/Technician/index.js~Technician#state",
    "access": "public",
    "description": "Contain data that may change over time",
    "lineNumber": 29,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.concerts",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.bands",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.scenes",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.events",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state.openedMenuItem",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/components/Technician/index.js~Technician",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Technician/index.js~Technician#componentDidMount",
    "access": "public",
    "description": "Fetch and Validate data",
    "lineNumber": 42,
    "params": [],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/Technician/index.js~Technician",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Technician/index.js~Technician#render",
    "access": "public",
    "description": "Display Technician",
    "lineNumber": 92,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return Technician"
    },
    "params": []
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "src/index.js",
    "content": "import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './main.css'\nimport App from './App'\nimport * as firebase from 'firebase'\n\n/**\n  * Initialize Firebase\n  */\nlet config = {\n  apiKey: \"AIzaSyDFLUADdxmxOyCeZ6aS3Ofv3MDJh3upxmU\",\n  authDomain: \"it1901-project.firebaseapp.com\",\n  databaseURL: \"https://it1901-project.firebaseio.com\",\n  projectId: \"it1901-project\",\n  storageBucket: \"it1901-project.appspot.com\",\n  messagingSenderId: \"544685307175\"\n}\nfirebase.initializeApp(config)\n\nReactDOM.render(<App />, document.getElementById('root'))\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "variable",
    "name": "config",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~config",
    "access": "public",
    "export": false,
    "importPath": "it1901-group-11/src/index.js",
    "importStyle": null,
    "description": "Initialize Firebase",
    "lineNumber": 10,
    "type": {
      "types": [
        "{\"apiKey\": string, \"authDomain\": string, \"databaseURL\": string, \"projectId\": string, \"storageBucket\": string, \"messagingSenderId\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "src/utils/index.js",
    "content": "import React from 'react'\nimport CircularProgress from 'material-ui/CircularProgress'\nimport FontIcon from 'material-ui/FontIcon'\nimport getMuiTheme from 'material-ui/styles/getMuiTheme'\nimport {amber500, amber700} from 'material-ui/styles/colors'\nimport {List, ListItem} from 'material-ui/List'\n\nimport 'datejs'\n\n\n/**\n * Define the basic colors of the page\n */\nexport const muiTheme = getMuiTheme({\n  palette: {\n    primary1Color: \"#f8c53b\",\n    primary2Color: amber500,\n    primary3Color: amber700,\n    accent1Color: \"#ea4a53\"\n  },\n})\n\n\n/**\n* Dynamic fethcing of profile pictures.\n*/\nexport const profiles = require.context('../img/profiles')\n\n\n/**\n * Parse a date object into a date string\n * @param {Date} date - a Date object\n * @return {String} 01. Jan 1970\n */\nexport const parseDate = (...date) => new Date(...date).toString('dd. MMM yyyy')\n\n/**\n  * Parse a date object into a time string\n  * @param {Date} date - a Date object\n  * @return {String} 00:00\n  */\nexport const parseTime = (...date) => new Date(...date).toString('HH:mm')\n\n/**\n* Prettify a long number\n* @param {number} num - an integer\n* @return {number} 1,000,000\n*/\nexport const parseNumber = num => num.toLocaleString()\n\n/**\n* Turn a number into Norwegian Kroner price\n* @param {number} price - an integer\n* @return {String} NOK1,000.00\n*/\nexport const parsePrice = price => price.toLocaleString('no-NO', {style: \"currency\", currency: \"NOK\"})\n\n/**\n* Capitalize a camelCase string\n* @param {String} s - a camelCase string\n* @return {String} Camel case\n*/\nexport const capitalize = s => (s.charAt(0).toUpperCase() + s.slice(1)).replace(/([a-z])([A-Z][a-z])/g, \"$1 $2\")\n\n/**\n* Loading spinner\n* @return {JSX} Return a spinner centralized on the screen\n*/\nexport const Loading = () => (\n  <div style={{\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    minHeight: \"70vh\",\n  }}><CircularProgress/></div>\n)\n\n/**\n* Display a material icon\n* @param {Object} props\n* @param {String} props.name - Name\n* @param {String} props.title - Title\n* @param {String} props.color - HEX or RGB color\n* @return {JSX} Returns an icon\n*/\nexport const Icon = ({name, title, color}) => (\n  <FontIcon\n    title={title ? title : name}\n    style={{\n      color: color ? color : \"#ea4a53\",\n      margin: \"0 .5em\"\n    }}\n    className=\"material-icons\"\n  >{name}\n  </FontIcon>\n)\n\n\n/**\n* Display something when there is no result of a search\n* @param {Object} props\n* @param {String} props.text - The text to show\n* @return {JSX} Return the text positioned to the center of the screen\n*/\nexport const NoResult = ({text}) => (\n  <div style={{\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    minHeight: \"70vh\",\n  }}>\n    <div style={{display: \"flex\", alignItems: \"center\"}}>\n      <p style={{color:\"grey\"}}>{text}</p>\n      <Icon name=\"sentiment_dissatisfied\"/>\n    </div>\n  </div>\n)\n\n\n/**\n  * Display a snippet of information with text and icon.\n  * @param {Object} props\n  * @param {String} props.icon - Icon to show on the left of the information\n  * @param {String} props.content - Content of the information snippet (for less content)\n  * @param {String} props.children - Content of the information snippet (for more content)\n  * @param {String} props.subText - Subtext to show\n  * @param {Boolean} props.disableTitle - Whether to display title on hover\n  * @param {Boolean} props.disableHover - Whether to display darkened background to highlight the information\n  * @param {String} props.alignSubText - Flex position of the sub text\n  * @param {String} props.orientation - Orientation of the snippet. Possible values: landscape | portrait\n  * @return {JSX} Return an information snippet\n  */\nexport const InfoSnippet = ({icon, content, children, subText, disableTitle, disableHover, alignSubText, orientation}) => (\n  <ListItem disabled={disableHover} title={disableTitle ? \"\" : subText}>\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        flexDirection: orientation === \"portrait\" && window.innerWidth < 768 && \"column\"\n      }}\n    >\n      <Icon\n        name={icon}\n        title={subText}\n      />\n      <div style={{\n        flexGrow: 1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: alignSubText ? alignSubText : \"flex-start\"\n      }}>\n        <div\n          style={{\n            flexGrow: 1,\n            margin: 0,\n            fontSize: \"1.1em\"\n          }}\n        >{children ? children : content}</div>\n        <h6\n          style={{\n            flexGrow: 1,\n            padding: 0,\n            color: \"grey\",\n            fontSize: \".9em\"\n          }}\n        >{subText}</h6>\n      </div>\n    </div>\n  </ListItem>\n)\n\n\n/**\n  * Display a list of reviews.\n  * @param {Object} props\n  * @param {Object} props.reviews - List of reviews\n  * @return {JSX} Return an information snippet\n  */\nexport const Review = ({reviews}) => (\n  <List>\n    {Object.keys(reviews).map(key => {\n      const {content, rating} = reviews[key]\n      return(\n        <ListItem key={key}>\n          <Rating {...{rating}}/>\n          <p>{content}</p>\n        </ListItem>\n      )\n    })}\n  </List>\n)\n\n/**\n  * Display a rating of 1 to 5 with stars.\n  * @param {Object} props\n  * @param {number} props.rating - Number from 1 to 5 (5 is best)\n  * @param {Boolean} props.editable - Should the rating be editable\n  * @param {Function} props.handleRatingChange - Function passed from parent component to handle changes of the rating value.\n  * @return {JSX} Return an information snippet\n  */\nexport const Rating = ({rating, editable, handleRatingChange}) =>  {\n  let stars = []\n  for(let i = 1; i < 6; i++) {\n    stars.push(\n      <li\n        style={editable && {cursor: \"pointer\"}}\n        key={i}\n        onClick={() => editable && handleRatingChange(i)}\n      >\n        <Icon name={`star${i<=rating ? \"\" : \"_border\"}`}/>\n      </li>\n    )\n  }\n  return (\n    <ul style={{display: \"flex\"}}>\n      {stars}\n    </ul>\n  )\n}\n",
    "static": true,
    "longname": "/home/balazs/github/it1901-group-11-react/src/utils/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "name": "muiTheme",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~muiTheme",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/utils/index.js",
    "importStyle": "{muiTheme}",
    "description": "Define the basic colors of the page",
    "lineNumber": 14,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "profiles",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~profiles",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/utils/index.js",
    "importStyle": "{profiles}",
    "description": "Dynamic fethcing of profile pictures.",
    "lineNumber": 27,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "parseDate",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~parseDate",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/utils/index.js",
    "importStyle": "{parseDate}",
    "description": "Parse a date object into a date string",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "a Date object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "01. Jan 1970"
    }
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "parseTime",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~parseTime",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/utils/index.js",
    "importStyle": "{parseTime}",
    "description": "Parse a date object into a time string",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "a Date object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "00:00"
    }
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "parseNumber",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~parseNumber",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/utils/index.js",
    "importStyle": "{parseNumber}",
    "description": "Prettify a long number",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "an integer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "1,000,000"
    }
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "parsePrice",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~parsePrice",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/utils/index.js",
    "importStyle": "{parsePrice}",
    "description": "Turn a number into Norwegian Kroner price",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "price",
        "description": "an integer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "NOK1,000.00"
    }
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "capitalize",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~capitalize",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/utils/index.js",
    "importStyle": "{capitalize}",
    "description": "Capitalize a camelCase string",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "a camelCase string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Camel case"
    }
  },
  {
    "__docId__": 220,
    "kind": "function",
    "name": "Loading",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~Loading",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/utils/index.js",
    "importStyle": "{Loading}",
    "description": "Loading spinner",
    "lineNumber": 69,
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return a spinner centralized on the screen"
    },
    "params": []
  },
  {
    "__docId__": 221,
    "kind": "function",
    "name": "Icon",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~Icon",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/utils/index.js",
    "importStyle": "{Icon}",
    "description": "Display a material icon",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.name",
        "description": "Name"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.title",
        "description": "Title"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.color",
        "description": "HEX or RGB color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Returns an icon"
    }
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "NoResult",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~NoResult",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/utils/index.js",
    "importStyle": "{NoResult}",
    "description": "Display something when there is no result of a search",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.text",
        "description": "The text to show"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return the text positioned to the center of the screen"
    }
  },
  {
    "__docId__": 223,
    "kind": "function",
    "name": "InfoSnippet",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~InfoSnippet",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/utils/index.js",
    "importStyle": "{InfoSnippet}",
    "description": "Display a snippet of information with text and icon.",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.icon",
        "description": "Icon to show on the left of the information"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.content",
        "description": "Content of the information snippet (for less content)"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.children",
        "description": "Content of the information snippet (for more content)"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.subText",
        "description": "Subtext to show"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.disableTitle",
        "description": "Whether to display title on hover"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.disableHover",
        "description": "Whether to display darkened background to highlight the information"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.alignSubText",
        "description": "Flex position of the sub text"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.orientation",
        "description": "Orientation of the snippet. Possible values: landscape | portrait"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return an information snippet"
    }
  },
  {
    "__docId__": 224,
    "kind": "function",
    "name": "Review",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~Review",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/utils/index.js",
    "importStyle": "{Review}",
    "description": "Display a list of reviews.",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.reviews",
        "description": "List of reviews"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return an information snippet"
    }
  },
  {
    "__docId__": 225,
    "kind": "function",
    "name": "Rating",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~Rating",
    "access": "public",
    "export": true,
    "importPath": "it1901-group-11/src/utils/index.js",
    "importStyle": "{Rating}",
    "description": "Display a rating of 1 to 5 with stars.",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "props.rating",
        "description": "Number from 1 to 5 (5 is best)"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.editable",
        "description": "Should the rating be editable"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "props.handleRatingChange",
        "description": "Function passed from parent component to handle changes of the rating value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX"
      ],
      "spread": false,
      "description": "Return an information snippet"
    }
  },
  {
    "kind": "index",
    "content": "IT1901 Project\n",
    "longname": "/home/balazs/github/it1901-group-11-react/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"it1901-group-11\",\n  \"version\": \"1.0.0-rc.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"datejs\": \"^1.0.0-rc3\",\n    \"esdoc-jsx-plugin\": \"^1.0.0\",\n    \"esdoc-lint-plugin\": \"^1.0.1\",\n    \"firebase\": \"^4.6.1\",\n    \"material-ui\": \"^0.19.4\",\n    \"material-ui-datetimepicker\": \"^1.0.2\",\n    \"moment\": \"^2.19.1\",\n    \"moment-range\": \"^3.0.3\",\n    \"node-sass-chokidar\": \"^0.0.3\",\n    \"npm-run-all\": \"^4.1.1\",\n    \"react\": \"^16.0.0\",\n    \"react-dom\": \"^16.0.0\",\n    \"react-masonry-css\": \"^1.0.10\",\n    \"react-scripts\": \"^1.0.16\",\n    \"sass-lint\": \"^1.12.1\"\n  },\n  \"scripts\": {\n    \"build-css\": \"node-sass-chokidar --include-path ./src/sass src/sass/main.sass src/main.css\",\n    \"watch-css\": \"npm run build-css && node-sass-chokidar --include-path ./src/sass src/sass/main.sass src/main.css -w -r\",\n    \"start-js\": \"react-scripts start\",\n    \"start\": \"npm-run-all -p watch-css start-js\",\n    \"build\": \"npm run build-css && react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"devDependencies\": {\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-react-plugin\": \"^1.0.1\",\n    \"esdoc-standard-plugin\": \"^1.0.0\"\n  }\n}\n",
    "longname": "/home/balazs/github/it1901-group-11-react/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]